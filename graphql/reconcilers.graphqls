extend type Mutation {
    """
    Enable a reconciler

    A reconciler must be fully configured before it can be enabled.
    """
    enableReconciler(
        "The name of the reconciler to enable."
        name: ReconcilerName!
    ): Reconciler! @admin

    """
    Disable a reconciler

    The reconciler configuration will be left intact.
    """
    disableReconciler(
        "The name of the reconciler to disable."
        name: ReconcilerName!
    ): Reconciler! @admin

    "Configure a reconciler."
    configureReconciler(
        "The name of the reconciler to configure."
        name: ReconcilerName!

        "Configuration options as a key => value map."
        config: Map!
    ): Reconciler! @admin

    "Reset all reconciler configuration options to their initial state and disable the reconciler if it is currently enabled."
    resetReconciler(
        "The name of the reconciler to reset."
        name: ReconcilerName!
    ): Reconciler! @admin
}

extend type Query {
    "Get a collection of reconcilers."
    reconcilers: [Reconciler!]! @admin
}

"Reconciler type."
type Reconciler {
    "The name of the reconciler."
    name: ReconcilerName!

    "The human-friendly name of the reconciler."
    displayName: String!

    "Description of what the reconciler is responsible for."
    description: String!

    "Whether or not the reconciler is available for teams in Console."
    enabled: Boolean!

    "Reconciler configuration keys and descriptions."
    config: [ReconcilerConfig!]!

    "Whether or not the reconciler is fully configured and ready to be enabled."
    configured: Boolean!

    "The run order of the reconciler."
    runOrder: Int!
}

"Reconciler configuration type."
type ReconcilerConfig {
    "Configuration key."
    key: String!

    "Configuration description."
    description: String!

    "Whether or not the configuration key has a value."
    configured: Boolean!
}