extend type Query {
    "Get a collection of users, sorted by name."
    users: [User!]! @auth

    "Get a specific user."
    user(
        "ID of the user."
        id: UUID!
    ): User! @auth

    "The currently authenticated user."
    me: User! @auth
}

extend type Mutation {
    "Create and return a new service account."
    createServiceAccount(
        "Input for creation of the new service account."
        input: CreateServiceAccountInput!
    ): User! @auth

    "Update an existing service account."
    updateServiceAccount(
        "ID of the service account to update."
        serviceAccountId: UUID!

        "Input for updating an existing service account."
        input: UpdateServiceAccountInput!
    ): User! @auth

    "Delete an existing service account."
    deleteServiceAccount(
        "ID of the service account to delete."
        serviceAccountId: UUID!
    ): Boolean! @auth
}

"User type."
type User {
    "Unique ID of the user."
    id: UUID!

    "The email address of the user."
    email: String!

    "The name of the user."
    name: String!

    "List of teams the user is a member of."
    teams: [UserTeam!]!

    "Whether or not the user is a service account."
    isServiceAccount: Boolean!

    "Roles attached to the user."
    roles: [Role!]!
}

"User team."
type UserTeam {
    "Team instance."
    team: Team!

    "The role that the user has in the team."
    role: TeamRole!
}

"Input for creating a new service account."
input CreateServiceAccountInput {
    "The name of the new service account. An email address will be automatically generated using the provided name."
    name: Slug!
}

"Input for updating an existing service account."
input UpdateServiceAccountInput {
    "The new name of the service account. The email address will be automatically updated."
    name: Slug!
}