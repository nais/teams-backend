extend type Query {
    "Get a collection of users."
    users(
        "Pagination options."
        pagination: Pagination

        "Input for filtering the query."
        query: UsersQuery

        "Input for sorting the collection. If omitted the collection will be sorted by the name of the user in ascending order."
        sort: UsersSort
    ): Users! @auth

    "Get a specific user."
    user(
        "ID of the user."
        id: UUID!
    ): User! @auth

    "The currently authenticated user."
    me: User! @auth
}

extend type Mutation {
    "Create and return a new service account."
    createServiceAccount(
        "Input for creation of the new service account."
        input: CreateServiceAccountInput!
    ): User! @auth

    "Update an existing service account."
    updateServiceAccount(
        "ID of the service account to update."
        serviceAccountId: UUID!

        "Input for updating an existing service account."
        input: UpdateServiceAccountInput!
    ): User! @auth

    "Delete an existing service account."
    deleteServiceAccount(
        "ID of the service account to delete."
        serviceAccountId: UUID!
    ): Boolean! @auth
}

"User type."
type User {
    "Unique ID of the user."
    id: UUID!

    "The email address of the user."
    email: String!

    "The name of the user."
    name: String!

    "List of teams the user is a member of."
    teams: [Team!]!

    "Whether or not the user has an API key."
    hasAPIKey: Boolean!

    "Whether or not the user is a service account."
    isServiceAccount: Boolean!

    "Creation time of the user."
    createdAt: Time!

    "Roles attached to the user."
    roles: [RoleBinding!]!
}

"User collection."
type Users {
    "Object related to pagination of the collection."
    pageInfo: PageInfo!

    "The list of user objects in the collection."
    nodes: [User!]!
}

"Input for filtering a collection of users."
input UsersQuery {
    "Filter by user email."
    email: String

    "Filter by user name."
    name: String
}

"Input for sorting a collection of users."
input UsersSort {
    "Field to sort by."
    field: UserSortField!

    "Sort direction."
    direction: SortDirection!
}

"Input for creating a new service account."
input CreateServiceAccountInput {
    "The name of the new service account. An email address will be automatically generated using the provided name."
    name: Slug!
}

"Input for updating an existing service account."
input UpdateServiceAccountInput {
    "The new name of the service account. The email address will be automatically updated."
    name: Slug!
}

"Fields to sort the collection by."
enum UserSortField {
    "Sort by name."
    NAME

    "Sort by email address."
    EMAIL

    "Sort by creation time."
    CREATED_AT
}