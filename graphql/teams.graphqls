extend type Query {
    "Get a collection of teams."
    teams(
        "Pagination options."
        pagination: Pagination

        "Input for filtering the query."
        query: TeamsQuery

        "Input for sorting the collection. If omitted the collection will be sorted by the name of the team in ascending order."
        sort: TeamsSort
    ): Teams! @auth

    "Get a specific team."
    team(
        "ID of the team."
        id: UUID!
    ): Team! @auth
}

extend type Mutation {
    """
    Create a new team

    The user creating the team will be granted team ownership.

    The new team will be returned on success.
    """
    createTeam(
        "Input for creation of the new team."
        input: CreateTeamInput!
    ): Team! @auth

    """
    Update an existing team

    This mutation can be used to update the team name and team purpose. It is not possible to update the team slug.

    The updated team will be returned on success.
    """
    updateTeam(
        "ID of the team to update."
        teamId: UUID!

        "Input for updating the team."
        input: UpdateTeamInput!
    ): Team! @auth

    """
    Remove one or more users from a team

    The updated team will be returned on success.
    """
    removeUsersFromTeam(
        "Input for removing users from a team."
        input: RemoveUsersFromTeamInput!
    ): Team! @auth

    """
    Manually synchronize a team

    This action will trigger a full synchronization of the team against the configured third party systems. The action
    is asynchronous.

    The team will be returned.
    """
    synchronizeTeam(
        "The ID of the team to synchronize."
        teamId: UUID!
    ): Team! @auth

    """
    Add users to a team as regular team members

    If one or more users are already added to the team they will not be updated. If a user is already an owner of the
    team the user will not lose ownership. Regular team members will get read-only access to the team.

    The updated team will be returned on success.
    """
    addTeamMembers(
        "Input for adding users to a team as members."
        input: AddTeamMembersInput!
    ): Team! @auth

    """
    Add users to a team as team owners

    If one or more users are already added to the team, they will be granted ownership of the team. If one or more users
    are already owners of the team, they will not be updated. Team owners will get read/write access to the team.

    The updated team will be returned on success.
    """
    addTeamOwners(
        "Input for adding users to a team as owners."
        input: AddTeamOwnersInput!
    ): Team! @auth

    """
    Set the member role of a user in a team

    The user must already exist in the team for this mutation to succeed.

    The team will be returned on success.
    """
    setTeamMemberRole(
        "Input for setting the team member role."
        input: SetTeamMemberRoleInput!
    ): Team! @auth
}

"Team type."
type Team {
    "ID of the team."
    id: UUID!

    "Unique slug of the team."
    slug: Slug!

    "Display name of the team."
    name: String!

    "Purpose of the team."
    purpose: String

    "Metadata attached to the team as a key => value map."
    metadata: Map

    "Audit logs for this team."
    auditLogs: [AuditLog!]!

    "Creation time of the team."
    createdAt: Time!

    "Team members."
    members: [TeamMember!]!
}

"Team member."
type TeamMember {
    "User instance."
    user: User!

    "The role that the user has in the team."
    role: TeamRole!
}

"Team collection."
type Teams {
    "Object related to pagination of the collection."
    pageInfo: PageInfo!

    "The list of team objects in the collection."
    nodes: [Team!]!
}

"Input for filtering a collection of teams."
input TeamsQuery {
    "Filter by slug."
    slug: Slug

    "Filter by name."
    name: String
}

"Input for sorting a collection of teams."
input TeamsSort {
    "Field to sort by."
    field: TeamSortField!

    "Sort direction."
    direction: SortDirection!
}

"Input for creating a new team."
input CreateTeamInput {
    "Team slug. This value immutable."
    slug: Slug!

    "Team name."
    name: String!

    "Team purpose."
    purpose: String
}

"Input for updating an existing team."
input UpdateTeamInput {
    "Team name."
    name: String

    "Team purpose."
    purpose: String
}

"Input for adding users to a team as members."
input AddTeamMembersInput {
    "ID of the team that should receive new members."
    teamId: UUID!

    "List of user IDs that should be added to the team as members."
    userIds: [UUID!]!
}

"Input for adding users to a team as owners."
input AddTeamOwnersInput {
    "ID of the team that should receive new owners."
    teamId: UUID!

    "List of user IDs that should be added to the team as owners."
    userIds: [UUID!]!
}

"Input for removing users from a team."
input RemoveUsersFromTeamInput {
    "List of user IDs that should be removed from the team."
    userIds: [UUID!]!

    "Team ID that should receive new users."
    teamId: UUID!
}

"Input for setting team member role."
input SetTeamMemberRoleInput {
    "The ID of the team."
    teamId: UUID!

    "The ID of the user."
    userId: UUID!

    "The team role to set."
    role: TeamRole!
}

"Fields to sort the collection by."
enum TeamSortField {
    "Sort by name."
    NAME

    "Sort by slug."
    SLUG

    "Sort by creation time."
    CREATED_AT
}

"Available team roles."
enum TeamRole {
    "Regular member, read only access."
    MEMBER

    "Team owner, full access to the team."
    OWNER
}