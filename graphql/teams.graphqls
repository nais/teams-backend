extend type Query {
    "Get a collection of teams."
    teams(
        "Pagination options."
        pagination: Pagination

        "Input for filtering the query."
        query: TeamsQuery

        "Input for sorting the collection. If omitted the collection will be sorted by the name of the team in ascending order."
        sort: TeamsSort
    ): Teams! @auth

    "Get a specific team."
    team(
        "ID of the team."
        id: UUID!
    ): Team! @auth
}

extend type Mutation {
    "Create a team, then return the created team."
    createTeam(
        "Input for creation of the new team."
        input: CreateTeamInput!
    ): Team! @auth

    "Add one or more users to a team, then return the team in question."
    addUsersToTeam(
        "Input for adding users to a team."
        input: AddUsersToTeamInput!
    ): Team! @auth

    "Remove one or more users from a team, then return team in question."
    removeUsersFromTeam(
        "Input for removing users from a team."
        input: RemoveUsersFromTeamInput!
    ): Team! @auth

    """
    Manually synchronize a team.

    This action will trigger a full synchronization of the team against the configured third party systems.

    The action is asynchronous.
    """
    synchronizeTeam(
        "The ID of the team to synchronize."
        teamId: UUID!
    ): Boolean! @auth

    """
    Add users to a team as team members

    If one or more users are already added to the team they will not be updated. If a user is already an owner of the
    team the user will not lose ownership.

    The updated team will be returned on success.
    """
    addTeamMembers(
        "Input for adding users to a team as members."
        input: AddTeamMembersInput!
    ): Team! @auth

    """
    Add users to a team as team owners

    If one or more users are already added to the team, they will be granted ownership of the team. If one or more users
    are already owners of the team, they will not be updated.

    The updated team will be returned on success.
    """
    addTeamOwners(
        "Input for adding users to a team as owners."
        input: AddTeamOwnersInput!
    ): Team! @auth
}

"Team type."
type Team {
    "ID of the team."
    id: UUID!

    "Unique slug of the team."
    slug: Slug!

    "Display name of the team."
    name: String!

    "Purpose of the team."
    purpose: String

    "List of users in the team."
    users: [User!]!

    "Metadata attached to the team as a key => value map."
    metadata: Map

    "Audit logs for this team."
    auditLogs: [AuditLog!]!

    "Creation time of the team."
    createdAt: Time!
}

"Team collection."
type Teams {
    "Object related to pagination of the collection."
    pageInfo: PageInfo!

    "The list of team objects in the collection."
    nodes: [Team!]!
}

"Input for filtering a collection of teams."
input TeamsQuery {
    "Filter by slug."
    slug: Slug

    "Filter by name."
    name: String
}

"Input for sorting a collection of teams."
input TeamsSort {
    "Field to sort by."
    field: TeamSortField!

    "Sort direction."
    direction: SortDirection!
}

"Input for creating a new team."
input CreateTeamInput {
    "Team slug."
    slug: Slug!

    "Team name."
    name: String!

    "Team purpose."
    purpose: String
}

"Input for adding users to a team."
input AddUsersToTeamInput {
    "List of user IDs that should be added to the team."
    userIds: [UUID!]!

    "Team ID that should receive new users."
    teamId: UUID!
}

"Input for adding users to a team as members."
input AddTeamMembersInput {
    "ID of the team that should receive new members."
    teamId: UUID!

    "List of user IDs that should be added to the team as members."
    userIds: [UUID!]!
}

"Input for adding users to a team as owners."
input AddTeamOwnersInput {
    "ID of the team that should receive new owners."
    teamId: UUID!

    "List of user IDs that should be added to the team as owners."
    userIds: [UUID!]!
}

"Input for removing users from a team."
input RemoveUsersFromTeamInput {
    "List of user IDs that should be removed from the team."
    userIds: [UUID!]!

    "Team ID that should receive new users."
    teamId: UUID!
}

"Fields to sort the collection by."
enum TeamSortField {
    "Sort by name."
    name

    "Sort by slug."
    slug

    "Sort by creation time."
    created_at
}