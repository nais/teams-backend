extend type Query {
    "Get a collection of teams."
    teams: [Team!]! @auth

    "Get a specific team."
    team(
        "Slug of the team."
        slug: Slug!
    ): Team! @auth
}

extend type Mutation {
    """
    Create a new team

    The user creating the team will be granted team ownership, unless the user is a service account, in which case the team will not get an initial owner. To add one or more owners to the team, refer to the `addTeamOwners` mutation.

    The new team will be returned on success.
    """
    createTeam(
        "Input for creation of the new team."
        input: CreateTeamInput!
    ): Team! @auth

    """
    Update an existing team

    This mutation can be used to update the team purpose. It is not possible to update the team slug.

    The updated team will be returned on success.
    """
    updateTeam(
        "Slug of the team to update."
        slug: Slug!

        "Input for updating the team."
        input: UpdateTeamInput!
    ): Team! @auth

    """
    Remove one or more users from a team

    The updated team will be returned on success.
    """
    removeUsersFromTeam(
        "Team slug that users should be removed from."
        slug: Slug!

        "List of user IDs that should be removed from the team."
        userIds: [UUID!]!
    ): Team! @auth

    """
    Manually synchronize a team

    This action will trigger a full synchronization of the team against the configured third party systems. The action
    is asynchronous.

    The team will be returned.
    """
    synchronizeTeam(
        "The slug of the team to synchronize."
        slug: Slug!
    ): TeamSync! @auth

    """
    Add users to a team as regular team members

    If one or more users are already added to the team they will not be updated. If a user is already an owner of the
    team the user will not lose ownership. Regular team members will get read-only access to the team.

    The updated team will be returned on success.
    """
    addTeamMembers(
        "Slug of the team that should receive new members."
        slug: Slug!

        "List of user IDs that should be added to the team as members."
        userIds: [UUID!]!
    ): Team! @auth

    """
    Add users to a team as team owners

    If one or more users are already added to the team, they will be granted ownership of the team. If one or more users
    are already owners of the team, they will not be updated. Team owners will get read/write access to the team.

    The updated team will be returned on success.
    """
    addTeamOwners(
        "Slug of the team that should receive new owners."
        slug: Slug!

        "List of user IDs that should be added to the team as owners."
        userIds: [UUID!]!
    ): Team! @auth

    """
    Set the member role of a user in a team

    The user must already exist in the team for this mutation to succeed.

    The team will be returned on success.
    """
    setTeamMemberRole(
        "The slug of the team."
        slug: Slug!

        "The ID of the user."
        userId: UUID!

        "The team role to set."
        role: TeamRole!
    ): Team! @auth

    """
    Disable a team

    When a team is disabled it will no longer be included during team reconciliation.

    The team will be returned on success.
    """
    disableTeam(
        "The slug of the team to disable."
        slug: Slug!
    ): Team! @auth

    """
    Enable a previously disabled team

    The team will be returned on success.
    """
    enableTeam(
        "The slug of the team to enable."
        slug: Slug!
    ): Team! @auth
}

"Team sync type."
type TeamSync {
    "The team that will be synced."
    team: Team!

    "The correlation ID for the sync."
    correlationID: UUID!
}

"Team type."
type Team {
    "Unique slug of the team."
    slug: Slug!

    "Purpose of the team."
    purpose: String!

    "Metadata attached to the team."
    metadata: [TeamMetadata!]!

    "Audit logs for this team."
    auditLogs: [AuditLog!]!

    "Team members."
    members: [TeamMember!]!

    "Possible issues related to synchronization of the team to configured external systems. If there are no entries the team can be considered fully synchronized."
    syncErrors: [SyncError!]!

    "Whether or not the team is enabled."
    enabled: Boolean!

    "Timestamp of the last successful synchronization of the team."
    lastSuccessfulSync: Time
}

"Team metadata type."
type TeamMetadata {
    "Metadata key."
    key: String!

    "Metadata value."
    value: String
}

"Sync error type."
type SyncError {
    "Creation time of the error."
    createdAt: Time!

    "The name of the reconciler."
    reconciler: ReconcilerName!

    "Error message."
    error: String!
}

"Team membership type."
type TeamMembership {
    "Team instance."
    team: Team!

    "The role that the member has in the team."
    role: TeamRole!
}

"Team member."
type TeamMember {
    "User instance."
    user: User!

    "The role that the user has in the team."
    role: TeamRole!
}

"Input for creating a new team."
input CreateTeamInput {
    "Team slug. After creation, this value can not be changed."
    slug: Slug!

    "Team purpose."
    purpose: String!
}

"Input for updating an existing team."
input UpdateTeamInput {
    "Specify team purpose to update the existing value."
    purpose: String
}

"Available team roles."
enum TeamRole {
    "Regular member, read only access."
    MEMBER

    "Team owner, full access to the team."
    OWNER
}