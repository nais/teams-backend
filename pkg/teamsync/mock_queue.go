// Code generated by mockery. DO NOT EDIT.

package teamsync

import mock "github.com/stretchr/testify/mock"

// MockQueue is an autogenerated mock type for the Queue type
type MockQueue struct {
	mock.Mock
}

type MockQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueue) EXPECT() *MockQueue_Expecter {
	return &MockQueue_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0
func (_m *MockQueue) Add(_a0 Input) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(Input) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueue_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockQueue_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 Input
func (_e *MockQueue_Expecter) Add(_a0 interface{}) *MockQueue_Add_Call {
	return &MockQueue_Add_Call{Call: _e.mock.On("Add", _a0)}
}

func (_c *MockQueue_Add_Call) Run(run func(_a0 Input)) *MockQueue_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Input))
	})
	return _c
}

func (_c *MockQueue_Add_Call) Return(_a0 error) *MockQueue_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueue_Add_Call) RunAndReturn(run func(Input) error) *MockQueue_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockQueue) Close() {
	_m.Called()
}

// MockQueue_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockQueue_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockQueue_Expecter) Close() *MockQueue_Close_Call {
	return &MockQueue_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockQueue_Close_Call) Run(run func()) *MockQueue_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueue_Close_Call) Return() *MockQueue_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockQueue_Close_Call) RunAndReturn(run func()) *MockQueue_Close_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueue creates a new instance of MockQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueue(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockQueue {
	mock := &MockQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
