// Code generated by mockery. DO NOT EDIT.

package teamsync

import (
	context "context"

	db "github.com/nais/teams-backend/pkg/db"
	mock "github.com/stretchr/testify/mock"

	slug "github.com/nais/teams-backend/pkg/slug"

	sqlc "github.com/nais/teams-backend/pkg/sqlc"

	uuid "github.com/google/uuid"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockHandler) Close() {
	_m.Called()
}

// MockHandler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockHandler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockHandler_Expecter) Close() *MockHandler_Close_Call {
	return &MockHandler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockHandler_Close_Call) Run(run func()) *MockHandler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandler_Close_Call) Return() *MockHandler_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Close_Call) RunAndReturn(run func()) *MockHandler_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: teamSlug, correlationID
func (_m *MockHandler) DeleteTeam(teamSlug slug.Slug, correlationID uuid.UUID) error {
	ret := _m.Called(teamSlug, correlationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(slug.Slug, uuid.UUID) error); ok {
		r0 = rf(teamSlug, correlationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHandler_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockHandler_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - teamSlug slug.Slug
//   - correlationID uuid.UUID
func (_e *MockHandler_Expecter) DeleteTeam(teamSlug interface{}, correlationID interface{}) *MockHandler_DeleteTeam_Call {
	return &MockHandler_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", teamSlug, correlationID)}
}

func (_c *MockHandler_DeleteTeam_Call) Run(run func(teamSlug slug.Slug, correlationID uuid.UUID)) *MockHandler_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(slug.Slug), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockHandler_DeleteTeam_Call) Return(_a0 error) *MockHandler_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_DeleteTeam_Call) RunAndReturn(run func(slug.Slug, uuid.UUID) error) *MockHandler_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// InitReconcilers provides a mock function with given fields: ctx
func (_m *MockHandler) InitReconcilers(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHandler_InitReconcilers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitReconcilers'
type MockHandler_InitReconcilers_Call struct {
	*mock.Call
}

// InitReconcilers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHandler_Expecter) InitReconcilers(ctx interface{}) *MockHandler_InitReconcilers_Call {
	return &MockHandler_InitReconcilers_Call{Call: _e.mock.On("InitReconcilers", ctx)}
}

func (_c *MockHandler_InitReconcilers_Call) Run(run func(ctx context.Context)) *MockHandler_InitReconcilers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockHandler_InitReconcilers_Call) Return(_a0 error) *MockHandler_InitReconcilers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_InitReconcilers_Call) RunAndReturn(run func(context.Context) error) *MockHandler_InitReconcilers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveReconciler provides a mock function with given fields: reconcilerName
func (_m *MockHandler) RemoveReconciler(reconcilerName sqlc.ReconcilerName) {
	_m.Called(reconcilerName)
}

// MockHandler_RemoveReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReconciler'
type MockHandler_RemoveReconciler_Call struct {
	*mock.Call
}

// RemoveReconciler is a helper method to define mock.On call
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockHandler_Expecter) RemoveReconciler(reconcilerName interface{}) *MockHandler_RemoveReconciler_Call {
	return &MockHandler_RemoveReconciler_Call{Call: _e.mock.On("RemoveReconciler", reconcilerName)}
}

func (_c *MockHandler_RemoveReconciler_Call) Run(run func(reconcilerName sqlc.ReconcilerName)) *MockHandler_RemoveReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockHandler_RemoveReconciler_Call) Return() *MockHandler_RemoveReconciler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_RemoveReconciler_Call) RunAndReturn(run func(sqlc.ReconcilerName)) *MockHandler_RemoveReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// Schedule provides a mock function with given fields: input
func (_m *MockHandler) Schedule(input Input) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(Input) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHandler_Schedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Schedule'
type MockHandler_Schedule_Call struct {
	*mock.Call
}

// Schedule is a helper method to define mock.On call
//   - input Input
func (_e *MockHandler_Expecter) Schedule(input interface{}) *MockHandler_Schedule_Call {
	return &MockHandler_Schedule_Call{Call: _e.mock.On("Schedule", input)}
}

func (_c *MockHandler_Schedule_Call) Run(run func(input Input)) *MockHandler_Schedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Input))
	})
	return _c
}

func (_c *MockHandler_Schedule_Call) Return(_a0 error) *MockHandler_Schedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Schedule_Call) RunAndReturn(run func(Input) error) *MockHandler_Schedule_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleAllTeams provides a mock function with given fields: ctx, correlationID
func (_m *MockHandler) ScheduleAllTeams(ctx context.Context, correlationID uuid.UUID) ([]*db.Team, error) {
	ret := _m.Called(ctx, correlationID)

	var r0 []*db.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*db.Team, error)); ok {
		return rf(ctx, correlationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*db.Team); ok {
		r0 = rf(ctx, correlationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, correlationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHandler_ScheduleAllTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleAllTeams'
type MockHandler_ScheduleAllTeams_Call struct {
	*mock.Call
}

// ScheduleAllTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - correlationID uuid.UUID
func (_e *MockHandler_Expecter) ScheduleAllTeams(ctx interface{}, correlationID interface{}) *MockHandler_ScheduleAllTeams_Call {
	return &MockHandler_ScheduleAllTeams_Call{Call: _e.mock.On("ScheduleAllTeams", ctx, correlationID)}
}

func (_c *MockHandler_ScheduleAllTeams_Call) Run(run func(ctx context.Context, correlationID uuid.UUID)) *MockHandler_ScheduleAllTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockHandler_ScheduleAllTeams_Call) Return(_a0 []*db.Team, _a1 error) *MockHandler_ScheduleAllTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHandler_ScheduleAllTeams_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*db.Team, error)) *MockHandler_ScheduleAllTeams_Call {
	_c.Call.Return(run)
	return _c
}

// SetReconcilerFactories provides a mock function with given fields: factories
func (_m *MockHandler) SetReconcilerFactories(factories ReconcilerFactories) {
	_m.Called(factories)
}

// MockHandler_SetReconcilerFactories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReconcilerFactories'
type MockHandler_SetReconcilerFactories_Call struct {
	*mock.Call
}

// SetReconcilerFactories is a helper method to define mock.On call
//   - factories ReconcilerFactories
func (_e *MockHandler_Expecter) SetReconcilerFactories(factories interface{}) *MockHandler_SetReconcilerFactories_Call {
	return &MockHandler_SetReconcilerFactories_Call{Call: _e.mock.On("SetReconcilerFactories", factories)}
}

func (_c *MockHandler_SetReconcilerFactories_Call) Run(run func(factories ReconcilerFactories)) *MockHandler_SetReconcilerFactories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ReconcilerFactories))
	})
	return _c
}

func (_c *MockHandler_SetReconcilerFactories_Call) Return() *MockHandler_SetReconcilerFactories_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_SetReconcilerFactories_Call) RunAndReturn(run func(ReconcilerFactories)) *MockHandler_SetReconcilerFactories_Call {
	_c.Call.Return(run)
	return _c
}

// SyncTeams provides a mock function with given fields: ctx
func (_m *MockHandler) SyncTeams(ctx context.Context) {
	_m.Called(ctx)
}

// MockHandler_SyncTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncTeams'
type MockHandler_SyncTeams_Call struct {
	*mock.Call
}

// SyncTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHandler_Expecter) SyncTeams(ctx interface{}) *MockHandler_SyncTeams_Call {
	return &MockHandler_SyncTeams_Call{Call: _e.mock.On("SyncTeams", ctx)}
}

func (_c *MockHandler_SyncTeams_Call) Run(run func(ctx context.Context)) *MockHandler_SyncTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockHandler_SyncTeams_Call) Return() *MockHandler_SyncTeams_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_SyncTeams_Call) RunAndReturn(run func(context.Context)) *MockHandler_SyncTeams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetrics provides a mock function with given fields: ctx
func (_m *MockHandler) UpdateMetrics(ctx context.Context) {
	_m.Called(ctx)
}

// MockHandler_UpdateMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetrics'
type MockHandler_UpdateMetrics_Call struct {
	*mock.Call
}

// UpdateMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHandler_Expecter) UpdateMetrics(ctx interface{}) *MockHandler_UpdateMetrics_Call {
	return &MockHandler_UpdateMetrics_Call{Call: _e.mock.On("UpdateMetrics", ctx)}
}

func (_c *MockHandler_UpdateMetrics_Call) Run(run func(ctx context.Context)) *MockHandler_UpdateMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockHandler_UpdateMetrics_Call) Return() *MockHandler_UpdateMetrics_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_UpdateMetrics_Call) RunAndReturn(run func(context.Context)) *MockHandler_UpdateMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// UseReconciler provides a mock function with given fields: reconciler
func (_m *MockHandler) UseReconciler(reconciler db.Reconciler) error {
	ret := _m.Called(reconciler)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.Reconciler) error); ok {
		r0 = rf(reconciler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHandler_UseReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseReconciler'
type MockHandler_UseReconciler_Call struct {
	*mock.Call
}

// UseReconciler is a helper method to define mock.On call
//   - reconciler db.Reconciler
func (_e *MockHandler_Expecter) UseReconciler(reconciler interface{}) *MockHandler_UseReconciler_Call {
	return &MockHandler_UseReconciler_Call{Call: _e.mock.On("UseReconciler", reconciler)}
}

func (_c *MockHandler_UseReconciler_Call) Run(run func(reconciler db.Reconciler)) *MockHandler_UseReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Reconciler))
	})
	return _c
}

func (_c *MockHandler_UseReconciler_Call) Return(_a0 error) *MockHandler_UseReconciler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_UseReconciler_Call) RunAndReturn(run func(db.Reconciler) error) *MockHandler_UseReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
