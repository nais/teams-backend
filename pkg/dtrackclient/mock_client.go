// Code generated by mockery v2.14.0. DO NOT EDIT.

package dtrackclient

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// AddToTeam provides a mock function with given fields: ctx, username, uuid
func (_m *MockClient) AddToTeam(ctx context.Context, username string, uuid string) error {
	ret := _m.Called(ctx, username, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTeam provides a mock function with given fields: ctx, teamName, permissions
func (_m *MockClient) CreateTeam(ctx context.Context, teamName string, permissions []Permission) (*Team, error) {
	ret := _m.Called(ctx, teamName, permissions)

	var r0 *Team
	if rf, ok := ret.Get(0).(func(context.Context, string, []Permission) *Team); ok {
		r0 = rf(ctx, teamName, permissions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []Permission) error); ok {
		r1 = rf(ctx, teamName, permissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, email
func (_m *MockClient) CreateUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTeam provides a mock function with given fields: ctx, uuid
func (_m *MockClient) DeleteTeam(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserMembership provides a mock function with given fields: ctx, uuid, username
func (_m *MockClient) DeleteUserMembership(ctx context.Context, uuid string, username string) error {
	ret := _m.Called(ctx, uuid, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, uuid, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTeams provides a mock function with given fields: ctx
func (_m *MockClient) GetTeams(ctx context.Context) ([]Team, error) {
	ret := _m.Called(ctx)

	var r0 []Team
	if rf, ok := ret.Get(0).(func(context.Context) []Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
