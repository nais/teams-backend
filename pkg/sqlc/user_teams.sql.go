// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user_teams.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const addUserToTeam = `-- name: AddUserToTeam :exec
INSERT INTO user_teams (id, user_id, team_id, created_by_id) VALUES ($1, $2, $3, $4)
`

type AddUserToTeamParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	TeamID      uuid.UUID
	CreatedByID uuid.NullUUID
}

func (q *Queries) AddUserToTeam(ctx context.Context, arg AddUserToTeamParams) error {
	_, err := q.db.Exec(ctx, addUserToTeam,
		arg.ID,
		arg.UserID,
		arg.TeamID,
		arg.CreatedByID,
	)
	return err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT users.id, users.created_at, users.created_by_id, users.updated_by_id, users.updated_at, users.email, users.name FROM user_teams
JOIN users ON users.id = user_teams.user_id
WHERE user_teams.team_id = $1
ORDER BY users.name ASC
`

func (q *Queries) GetTeamMembers(ctx context.Context, teamID uuid.UUID) ([]*User, error) {
	rows, err := q.db.Query(ctx, getTeamMembers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.CreatedByID,
			&i.UpdatedByID,
			&i.UpdatedAt,
			&i.Email,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTeams = `-- name: GetUserTeams :many
SELECT id, created_at, created_by_id, updated_by_id, updated_at, user_id, team_id FROM user_teams WHERE user_id = $1
`

func (q *Queries) GetUserTeams(ctx context.Context, userID uuid.UUID) ([]*UserTeam, error) {
	rows, err := q.db.Query(ctx, getUserTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UserTeam
	for rows.Next() {
		var i UserTeam
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.CreatedByID,
			&i.UpdatedByID,
			&i.UpdatedAt,
			&i.UserID,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
