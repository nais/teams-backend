// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: teams.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/nais/console/pkg/slug"
)

const addTeamMember = `-- name: AddTeamMember :exec
INSERT INTO user_roles (user_id, role_name, target_id) VALUES ($1, 'Team member', $2::UUID) ON CONFLICT DO NOTHING
`

type AddTeamMemberParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) error {
	_, err := q.db.Exec(ctx, addTeamMember, arg.UserID, arg.TeamID)
	return err
}

const addTeamOwner = `-- name: AddTeamOwner :exec
INSERT INTO user_roles (user_id, role_name, target_id) VALUES ($1, 'Team owner', $2::UUID) ON CONFLICT DO NOTHING
`

type AddTeamOwnerParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) AddTeamOwner(ctx context.Context, arg AddTeamOwnerParams) error {
	_, err := q.db.Exec(ctx, addTeamOwner, arg.UserID, arg.TeamID)
	return err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (id, name, slug, purpose) VALUES ($1, $2, $3, $4)
RETURNING id, slug, name, purpose
`

type CreateTeamParams struct {
	ID      uuid.UUID
	Name    string
	Slug    slug.Slug
	Purpose sql.NullString
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (*Team, error) {
	row := q.db.QueryRow(ctx, createTeam,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Purpose,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Purpose,
	)
	return &i, err
}

const getTeamByID = `-- name: GetTeamByID :one
SELECT id, slug, name, purpose FROM teams WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeamByID(ctx context.Context, id uuid.UUID) (*Team, error) {
	row := q.db.QueryRow(ctx, getTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Purpose,
	)
	return &i, err
}

const getTeamBySlug = `-- name: GetTeamBySlug :one
SELECT id, slug, name, purpose FROM teams WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetTeamBySlug(ctx context.Context, slug slug.Slug) (*Team, error) {
	row := q.db.QueryRow(ctx, getTeamBySlug, slug)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Purpose,
	)
	return &i, err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT users.id, users.email, users.name FROM user_roles
JOIN teams ON teams.id = user_roles.target_id
JOIN users ON users.id = user_roles.user_id
WHERE user_roles.target_id = $1::UUID
ORDER BY users.name ASC
`

func (q *Queries) GetTeamMembers(ctx context.Context, teamID uuid.UUID) ([]*User, error) {
	rows, err := q.db.Query(ctx, getTeamMembers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Email, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeams = `-- name: GetTeams :many
SELECT id, slug, name, purpose FROM teams ORDER BY name ASC
`

func (q *Queries) GetTeams(ctx context.Context) ([]*Team, error) {
	rows, err := q.db.Query(ctx, getTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.Purpose,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromTeam = `-- name: RemoveUserFromTeam :exec
DELETE FROM user_roles WHERE user_id = $1 AND target_id = $2::UUID
`

type RemoveUserFromTeamParams struct {
	UserID uuid.UUID
	TeamID uuid.UUID
}

func (q *Queries) RemoveUserFromTeam(ctx context.Context, arg RemoveUserFromTeamParams) error {
	_, err := q.db.Exec(ctx, removeUserFromTeam, arg.UserID, arg.TeamID)
	return err
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams SET name = COALESCE($1, name), purpose = COALESCE($2, purpose) WHERE id = $3 RETURNING id, slug, name, purpose
`

type UpdateTeamParams struct {
	Name    sql.NullString
	Purpose sql.NullString
	ID      uuid.UUID
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (*Team, error) {
	row := q.db.QueryRow(ctx, updateTeam, arg.Name, arg.Purpose, arg.ID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Purpose,
	)
	return &i, err
}
