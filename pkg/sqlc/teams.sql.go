// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: teams.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (id, name, slug, purpose, created_by_id) VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, created_by_id, updated_by_id, updated_at, slug, name, purpose
`

type CreateTeamParams struct {
	ID          uuid.UUID
	Name        string
	Slug        string
	Purpose     sql.NullString
	CreatedByID uuid.NullUUID
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (*Team, error) {
	row := q.db.QueryRow(ctx, createTeam,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Purpose,
		arg.CreatedByID,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.UpdatedByID,
		&i.UpdatedAt,
		&i.Slug,
		&i.Name,
		&i.Purpose,
	)
	return &i, err
}

const getTeam = `-- name: GetTeam :one
SELECT id, created_at, created_by_id, updated_by_id, updated_at, slug, name, purpose FROM teams WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id uuid.UUID) (*Team, error) {
	row := q.db.QueryRow(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.UpdatedByID,
		&i.UpdatedAt,
		&i.Slug,
		&i.Name,
		&i.Purpose,
	)
	return &i, err
}

const getTeams = `-- name: GetTeams :many
SELECT id, created_at, created_by_id, updated_by_id, updated_at, slug, name, purpose FROM teams ORDER BY name ASC
`

func (q *Queries) GetTeams(ctx context.Context) ([]*Team, error) {
	rows, err := q.db.Query(ctx, getTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.CreatedByID,
			&i.UpdatedByID,
			&i.UpdatedAt,
			&i.Slug,
			&i.Name,
			&i.Purpose,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
