// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: system_states.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const getTeamSystemState = `-- name: GetTeamSystemState :one
SELECT system_name, team_id, state FROM system_states WHERE system_name = $1 AND team_id = $2 LIMIT 1
`

type GetTeamSystemStateParams struct {
	SystemName SystemName
	TeamID     uuid.UUID
}

func (q *Queries) GetTeamSystemState(ctx context.Context, arg GetTeamSystemStateParams) (*SystemState, error) {
	row := q.db.QueryRow(ctx, getTeamSystemState, arg.SystemName, arg.TeamID)
	var i SystemState
	err := row.Scan(&i.SystemName, &i.TeamID, &i.State)
	return &i, err
}

const setTeamSystemState = `-- name: SetTeamSystemState :exec
INSERT INTO system_states (system_name, team_id, state) VALUES($1, $2, $3) ON CONFLICT (system_name, team_id) DO UPDATE SET state = $3
`

type SetTeamSystemStateParams struct {
	SystemName SystemName
	TeamID     uuid.UUID
	State      pgtype.JSONB
}

func (q *Queries) SetTeamSystemState(ctx context.Context, arg SetTeamSystemStateParams) error {
	_, err := q.db.Exec(ctx, setTeamSystemState, arg.SystemName, arg.TeamID, arg.State)
	return err
}
