// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reconciler_errors.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const clearReconcilerErrorsForTeam = `-- name: ClearReconcilerErrorsForTeam :exec
DELETE FROM reconciler_errors
WHERE team_id = $1 AND reconciler = $2
`

type ClearReconcilerErrorsForTeamParams struct {
	TeamID     uuid.UUID
	Reconciler ReconcilerName
}

func (q *Queries) ClearReconcilerErrorsForTeam(ctx context.Context, arg ClearReconcilerErrorsForTeamParams) error {
	_, err := q.db.Exec(ctx, clearReconcilerErrorsForTeam, arg.TeamID, arg.Reconciler)
	return err
}

const getTeamReconcilerErrors = `-- name: GetTeamReconcilerErrors :many
SELECT id, correlation_id, team_id, reconciler, created_at, error_message FROM reconciler_errors
WHERE team_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTeamReconcilerErrors(ctx context.Context, teamID uuid.UUID) ([]*ReconcilerError, error) {
	rows, err := q.db.Query(ctx, getTeamReconcilerErrors, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ReconcilerError
	for rows.Next() {
		var i ReconcilerError
		if err := rows.Scan(
			&i.ID,
			&i.CorrelationID,
			&i.TeamID,
			&i.Reconciler,
			&i.CreatedAt,
			&i.ErrorMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setReconcilerErrorForTeam = `-- name: SetReconcilerErrorForTeam :exec
INSERT INTO reconciler_errors (correlation_id, team_id, reconciler, error_message)
VALUES ($1, $2, $3, $4)
ON CONFLICT(team_id, reconciler) DO
    UPDATE SET correlation_id = $1, created_at = NOW(), error_message = $4
`

type SetReconcilerErrorForTeamParams struct {
	CorrelationID uuid.UUID
	TeamID        uuid.UUID
	Reconciler    ReconcilerName
	ErrorMessage  string
}

func (q *Queries) SetReconcilerErrorForTeam(ctx context.Context, arg SetReconcilerErrorForTeamParams) error {
	_, err := q.db.Exec(ctx, setReconcilerErrorForTeam,
		arg.CorrelationID,
		arg.TeamID,
		arg.Reconciler,
		arg.ErrorMessage,
	)
	return err
}
