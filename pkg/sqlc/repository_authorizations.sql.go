// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: repository_authorizations.sql

package sqlc

import (
	"context"
)

const createRepositoryAuthorization = `-- name: CreateRepositoryAuthorization :exec
INSERT INTO repository_authorizations (team_slug, github_repository, repository_authorization)
VALUES ($1, $2, $3)
ON CONFLICT DO NOTHING
`

type CreateRepositoryAuthorizationParams struct {
	TeamSlug                string
	GithubRepository        string
	RepositoryAuthorization RepositoryAuthorizationEnum
}

func (q *Queries) CreateRepositoryAuthorization(ctx context.Context, arg CreateRepositoryAuthorizationParams) error {
	_, err := q.db.Exec(ctx, createRepositoryAuthorization, arg.TeamSlug, arg.GithubRepository, arg.RepositoryAuthorization)
	return err
}

const getRepositoryAuthorizations = `-- name: GetRepositoryAuthorizations :many
SELECT
    repository_authorization
FROM
    repository_authorizations
WHERE
    team_slug = $1
    AND github_repository = $2
ORDER BY
    repository_authorization
`

type GetRepositoryAuthorizationsParams struct {
	TeamSlug         string
	GithubRepository string
}

func (q *Queries) GetRepositoryAuthorizations(ctx context.Context, arg GetRepositoryAuthorizationsParams) ([]RepositoryAuthorizationEnum, error) {
	rows, err := q.db.Query(ctx, getRepositoryAuthorizations, arg.TeamSlug, arg.GithubRepository)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RepositoryAuthorizationEnum
	for rows.Next() {
		var repository_authorization RepositoryAuthorizationEnum
		if err := rows.Scan(&repository_authorization); err != nil {
			return nil, err
		}
		items = append(items, repository_authorization)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRepositoryAuthorization = `-- name: RemoveRepositoryAuthorization :exec
DELETE FROM repository_authorizations
WHERE
    team_slug = $1
    AND github_repository = $2
    AND repository_authorization = $3
`

type RemoveRepositoryAuthorizationParams struct {
	TeamSlug                string
	GithubRepository        string
	RepositoryAuthorization RepositoryAuthorizationEnum
}

func (q *Queries) RemoveRepositoryAuthorization(ctx context.Context, arg RemoveRepositoryAuthorizationParams) error {
	_, err := q.db.Exec(ctx, removeRepositoryAuthorization, arg.TeamSlug, arg.GithubRepository, arg.RepositoryAuthorization)
	return err
}
