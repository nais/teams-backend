// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: roles.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/nais/console/pkg/roles"
)

const getRole = `-- name: GetRole :one
SELECT id, created_at, created_by_id, updated_by_id, updated_at, name FROM roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id uuid.UUID) (*Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.UpdatedByID,
		&i.UpdatedAt,
		&i.Name,
	)
	return &i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, created_at, created_by_id, updated_by_id, updated_at, name FROM roles WHERE name = $1 LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name roles.Role) (*Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.UpdatedByID,
		&i.UpdatedAt,
		&i.Name,
	)
	return &i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, created_at, created_by_id, updated_by_id, updated_at, name FROM roles
ORDER BY name ASC
`

func (q *Queries) GetRoles(ctx context.Context) ([]*Role, error) {
	rows, err := q.db.Query(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.CreatedByID,
			&i.UpdatedByID,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRole = `-- name: GetUserRole :one
SELECT id, created_at, created_by_id, updated_by_id, updated_at, role_id, user_id, target_id FROM user_roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserRole(ctx context.Context, id uuid.UUID) (*UserRole, error) {
	row := q.db.QueryRow(ctx, getUserRole, id)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.CreatedByID,
		&i.UpdatedByID,
		&i.UpdatedAt,
		&i.RoleID,
		&i.UserID,
		&i.TargetID,
	)
	return &i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT id, created_at, created_by_id, updated_by_id, updated_at, role_id, user_id, target_id FROM user_roles
WHERE user_id = $1
`

func (q *Queries) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]*UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.CreatedByID,
			&i.UpdatedByID,
			&i.UpdatedAt,
			&i.RoleID,
			&i.UserID,
			&i.TargetID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
