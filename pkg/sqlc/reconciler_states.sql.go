// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reconciler_states.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const getReconcilerStateForTeam = `-- name: GetReconcilerStateForTeam :one
SELECT reconciler, team_id, state FROM reconciler_states
WHERE reconciler = $1 AND team_id = $2
`

type GetReconcilerStateForTeamParams struct {
	Reconciler ReconcilerName
	TeamID     uuid.UUID
}

func (q *Queries) GetReconcilerStateForTeam(ctx context.Context, arg GetReconcilerStateForTeamParams) (*ReconcilerState, error) {
	row := q.db.QueryRow(ctx, getReconcilerStateForTeam, arg.Reconciler, arg.TeamID)
	var i ReconcilerState
	err := row.Scan(&i.Reconciler, &i.TeamID, &i.State)
	return &i, err
}

const setReconcilerStateForTeam = `-- name: SetReconcilerStateForTeam :exec
INSERT INTO reconciler_states (reconciler, team_id, state)
VALUES($1, $2, $3)
ON CONFLICT (reconciler, team_id) DO
    UPDATE SET state = $3
`

type SetReconcilerStateForTeamParams struct {
	Reconciler ReconcilerName
	TeamID     uuid.UUID
	State      pgtype.JSONB
}

func (q *Queries) SetReconcilerStateForTeam(ctx context.Context, arg SetReconcilerStateForTeamParams) error {
	_, err := q.db.Exec(ctx, setReconcilerStateForTeam, arg.Reconciler, arg.TeamID, arg.State)
	return err
}
