// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
	"github.com/nais/teams-backend/pkg/slug"
)

type AuditAction string

const (
	AuditActionAzureGroupAddMember                       AuditAction = "azure:group:add-member"
	AuditActionAzureGroupAddMembers                      AuditAction = "azure:group:add-members"
	AuditActionAzureGroupCreate                          AuditAction = "azure:group:create"
	AuditActionAzureGroupDelete                          AuditAction = "azure:group:delete"
	AuditActionAzureGroupDeleteMember                    AuditAction = "azure:group:delete-member"
	AuditActionDependencytrackGroupCreate                AuditAction = "dependencytrack:group:create"
	AuditActionGithubTeamAddMember                       AuditAction = "github:team:add-member"
	AuditActionGithubTeamAddMembers                      AuditAction = "github:team:add-members"
	AuditActionGithubTeamCreate                          AuditAction = "github:team:create"
	AuditActionGithubTeamDelete                          AuditAction = "github:team:delete"
	AuditActionGithubTeamDeleteMember                    AuditAction = "github:team:delete-member"
	AuditActionGithubTeamMapSsoUser                      AuditAction = "github:team:map-sso-user"
	AuditActionGoogleGarDelete                           AuditAction = "google:gar:delete"
	AuditActionGoogleGcpDeleteProject                    AuditAction = "google:gcp:delete-project"
	AuditActionGoogleGcpProjectAssignPermissions         AuditAction = "google:gcp:project:assign-permissions"
	AuditActionGoogleGcpProjectCreateCnrmServiceAccount  AuditAction = "google:gcp:project:create-cnrm-service-account"
	AuditActionGoogleGcpProjectCreateProject             AuditAction = "google:gcp:project:create-project"
	AuditActionGoogleGcpProjectDeleteCnrmServiceAccount  AuditAction = "google:gcp:project:delete-cnrm-service-account"
	AuditActionGoogleGcpProjectEnableGoogleApis          AuditAction = "google:gcp:project:enable-google-apis"
	AuditActionGoogleGcpProjectSetBillingInfo            AuditAction = "google:gcp:project:set-billing-info"
	AuditActionGoogleWorkspaceAdminAddMember             AuditAction = "google:workspace-admin:add-member"
	AuditActionGoogleWorkspaceAdminAddMembers            AuditAction = "google:workspace-admin:add-members"
	AuditActionGoogleWorkspaceAdminAddToGkeSecurityGroup AuditAction = "google:workspace-admin:add-to-gke-security-group"
	AuditActionGoogleWorkspaceAdminCreate                AuditAction = "google:workspace-admin:create"
	AuditActionGoogleWorkspaceAdminDelete                AuditAction = "google:workspace-admin:delete"
	AuditActionGoogleWorkspaceAdminDeleteMember          AuditAction = "google:workspace-admin:delete-member"
	AuditActionGraphqlApiApiKeyCreate                    AuditAction = "graphql-api:api-key:create"
	AuditActionGraphqlApiApiKeyDelete                    AuditAction = "graphql-api:api-key:delete"
	AuditActionGraphqlApiReconcilersConfigure            AuditAction = "graphql-api:reconcilers:configure"
	AuditActionGraphqlApiReconcilersDisable              AuditAction = "graphql-api:reconcilers:disable"
	AuditActionGraphqlApiReconcilersEnable               AuditAction = "graphql-api:reconcilers:enable"
	AuditActionGraphqlApiReconcilersReset                AuditAction = "graphql-api:reconcilers:reset"
	AuditActionGraphqlApiReconcilersUpdateTeamState      AuditAction = "graphql-api:reconcilers:update-team-state"
	AuditActionGraphqlApiRolesAssignGlobalRole           AuditAction = "graphql-api:roles:assign-global-role"
	AuditActionGraphqlApiRolesRevokeGlobalRole           AuditAction = "graphql-api:roles:revoke-global-role"
	AuditActionGraphqlApiServiceAccountCreate            AuditAction = "graphql-api:service-account:create"
	AuditActionGraphqlApiServiceAccountDelete            AuditAction = "graphql-api:service-account:delete"
	AuditActionGraphqlApiServiceAccountUpdate            AuditAction = "graphql-api:service-account:update"
	AuditActionGraphqlApiTeamAddMember                   AuditAction = "graphql-api:team:add-member"
	AuditActionGraphqlApiTeamAddOwner                    AuditAction = "graphql-api:team:add-owner"
	AuditActionGraphqlApiTeamCreate                      AuditAction = "graphql-api:team:create"
	AuditActionGraphqlApiTeamDisable                     AuditAction = "graphql-api:team:disable"
	AuditActionGraphqlApiTeamEnable                      AuditAction = "graphql-api:team:enable"
	AuditActionGraphqlApiTeamRemoveMember                AuditAction = "graphql-api:team:remove-member"
	AuditActionGraphqlApiTeamSetMemberRole               AuditAction = "graphql-api:team:set-member-role"
	AuditActionGraphqlApiTeamSync                        AuditAction = "graphql-api:team:sync"
	AuditActionGraphqlApiTeamUpdate                      AuditAction = "graphql-api:team:update"
	AuditActionGraphqlApiTeamsDelete                     AuditAction = "graphql-api:teams:delete"
	AuditActionGraphqlApiTeamsRequestDelete              AuditAction = "graphql-api:teams:request-delete"
	AuditActionGraphqlApiUsersSync                       AuditAction = "graphql-api:users:sync"
	AuditActionLegacyImporterTeamAddMember               AuditAction = "legacy-importer:team:add-member"
	AuditActionLegacyImporterTeamAddOwner                AuditAction = "legacy-importer:team:add-owner"
	AuditActionLegacyImporterTeamCreate                  AuditAction = "legacy-importer:team:create"
	AuditActionLegacyImporterUserCreate                  AuditAction = "legacy-importer:user:create"
	AuditActionNaisDeployProvisionDeployKey              AuditAction = "nais:deploy:provision-deploy-key"
	AuditActionNaisNamespaceCreateNamespace              AuditAction = "nais:namespace:create-namespace"
	AuditActionNaisNamespaceDeleteNamespace              AuditAction = "nais:namespace:delete-namespace"
	AuditActionUsersyncAssignAdminRole                   AuditAction = "usersync:assign-admin-role"
	AuditActionUsersyncCreate                            AuditAction = "usersync:create"
	AuditActionUsersyncDelete                            AuditAction = "usersync:delete"
	AuditActionUsersyncListLocal                         AuditAction = "usersync:list:local"
	AuditActionUsersyncListRemote                        AuditAction = "usersync:list:remote"
	AuditActionUsersyncPrepare                           AuditAction = "usersync:prepare"
	AuditActionUsersyncRevokeAdminRole                   AuditAction = "usersync:revoke-admin-role"
	AuditActionUsersyncUpdate                            AuditAction = "usersync:update"
)

func (e *AuditAction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuditAction(s)
	case string:
		*e = AuditAction(s)
	default:
		return fmt.Errorf("unsupported scan type for AuditAction: %T", src)
	}
	return nil
}

type NullAuditAction struct {
	AuditAction AuditAction
	Valid       bool // Valid is true if AuditAction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuditAction) Scan(value interface{}) error {
	if value == nil {
		ns.AuditAction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuditAction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuditAction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuditAction), nil
}

func (e AuditAction) Valid() bool {
	switch e {
	case AuditActionAzureGroupAddMember,
		AuditActionAzureGroupAddMembers,
		AuditActionAzureGroupCreate,
		AuditActionAzureGroupDelete,
		AuditActionAzureGroupDeleteMember,
		AuditActionDependencytrackGroupCreate,
		AuditActionGithubTeamAddMember,
		AuditActionGithubTeamAddMembers,
		AuditActionGithubTeamCreate,
		AuditActionGithubTeamDelete,
		AuditActionGithubTeamDeleteMember,
		AuditActionGithubTeamMapSsoUser,
		AuditActionGoogleGarDelete,
		AuditActionGoogleGcpDeleteProject,
		AuditActionGoogleGcpProjectAssignPermissions,
		AuditActionGoogleGcpProjectCreateCnrmServiceAccount,
		AuditActionGoogleGcpProjectCreateProject,
		AuditActionGoogleGcpProjectDeleteCnrmServiceAccount,
		AuditActionGoogleGcpProjectEnableGoogleApis,
		AuditActionGoogleGcpProjectSetBillingInfo,
		AuditActionGoogleWorkspaceAdminAddMember,
		AuditActionGoogleWorkspaceAdminAddMembers,
		AuditActionGoogleWorkspaceAdminAddToGkeSecurityGroup,
		AuditActionGoogleWorkspaceAdminCreate,
		AuditActionGoogleWorkspaceAdminDelete,
		AuditActionGoogleWorkspaceAdminDeleteMember,
		AuditActionGraphqlApiApiKeyCreate,
		AuditActionGraphqlApiApiKeyDelete,
		AuditActionGraphqlApiReconcilersConfigure,
		AuditActionGraphqlApiReconcilersDisable,
		AuditActionGraphqlApiReconcilersEnable,
		AuditActionGraphqlApiReconcilersReset,
		AuditActionGraphqlApiReconcilersUpdateTeamState,
		AuditActionGraphqlApiRolesAssignGlobalRole,
		AuditActionGraphqlApiRolesRevokeGlobalRole,
		AuditActionGraphqlApiServiceAccountCreate,
		AuditActionGraphqlApiServiceAccountDelete,
		AuditActionGraphqlApiServiceAccountUpdate,
		AuditActionGraphqlApiTeamAddMember,
		AuditActionGraphqlApiTeamAddOwner,
		AuditActionGraphqlApiTeamCreate,
		AuditActionGraphqlApiTeamDisable,
		AuditActionGraphqlApiTeamEnable,
		AuditActionGraphqlApiTeamRemoveMember,
		AuditActionGraphqlApiTeamSetMemberRole,
		AuditActionGraphqlApiTeamSync,
		AuditActionGraphqlApiTeamUpdate,
		AuditActionGraphqlApiTeamsDelete,
		AuditActionGraphqlApiTeamsRequestDelete,
		AuditActionGraphqlApiUsersSync,
		AuditActionLegacyImporterTeamAddMember,
		AuditActionLegacyImporterTeamAddOwner,
		AuditActionLegacyImporterTeamCreate,
		AuditActionLegacyImporterUserCreate,
		AuditActionNaisDeployProvisionDeployKey,
		AuditActionNaisNamespaceCreateNamespace,
		AuditActionNaisNamespaceDeleteNamespace,
		AuditActionUsersyncAssignAdminRole,
		AuditActionUsersyncCreate,
		AuditActionUsersyncDelete,
		AuditActionUsersyncListLocal,
		AuditActionUsersyncListRemote,
		AuditActionUsersyncPrepare,
		AuditActionUsersyncRevokeAdminRole,
		AuditActionUsersyncUpdate:
		return true
	}
	return false
}

func AllAuditActionValues() []AuditAction {
	return []AuditAction{
		AuditActionAzureGroupAddMember,
		AuditActionAzureGroupAddMembers,
		AuditActionAzureGroupCreate,
		AuditActionAzureGroupDelete,
		AuditActionAzureGroupDeleteMember,
		AuditActionDependencytrackGroupCreate,
		AuditActionGithubTeamAddMember,
		AuditActionGithubTeamAddMembers,
		AuditActionGithubTeamCreate,
		AuditActionGithubTeamDelete,
		AuditActionGithubTeamDeleteMember,
		AuditActionGithubTeamMapSsoUser,
		AuditActionGoogleGarDelete,
		AuditActionGoogleGcpDeleteProject,
		AuditActionGoogleGcpProjectAssignPermissions,
		AuditActionGoogleGcpProjectCreateCnrmServiceAccount,
		AuditActionGoogleGcpProjectCreateProject,
		AuditActionGoogleGcpProjectDeleteCnrmServiceAccount,
		AuditActionGoogleGcpProjectEnableGoogleApis,
		AuditActionGoogleGcpProjectSetBillingInfo,
		AuditActionGoogleWorkspaceAdminAddMember,
		AuditActionGoogleWorkspaceAdminAddMembers,
		AuditActionGoogleWorkspaceAdminAddToGkeSecurityGroup,
		AuditActionGoogleWorkspaceAdminCreate,
		AuditActionGoogleWorkspaceAdminDelete,
		AuditActionGoogleWorkspaceAdminDeleteMember,
		AuditActionGraphqlApiApiKeyCreate,
		AuditActionGraphqlApiApiKeyDelete,
		AuditActionGraphqlApiReconcilersConfigure,
		AuditActionGraphqlApiReconcilersDisable,
		AuditActionGraphqlApiReconcilersEnable,
		AuditActionGraphqlApiReconcilersReset,
		AuditActionGraphqlApiReconcilersUpdateTeamState,
		AuditActionGraphqlApiRolesAssignGlobalRole,
		AuditActionGraphqlApiRolesRevokeGlobalRole,
		AuditActionGraphqlApiServiceAccountCreate,
		AuditActionGraphqlApiServiceAccountDelete,
		AuditActionGraphqlApiServiceAccountUpdate,
		AuditActionGraphqlApiTeamAddMember,
		AuditActionGraphqlApiTeamAddOwner,
		AuditActionGraphqlApiTeamCreate,
		AuditActionGraphqlApiTeamDisable,
		AuditActionGraphqlApiTeamEnable,
		AuditActionGraphqlApiTeamRemoveMember,
		AuditActionGraphqlApiTeamSetMemberRole,
		AuditActionGraphqlApiTeamSync,
		AuditActionGraphqlApiTeamUpdate,
		AuditActionGraphqlApiTeamsDelete,
		AuditActionGraphqlApiTeamsRequestDelete,
		AuditActionGraphqlApiUsersSync,
		AuditActionLegacyImporterTeamAddMember,
		AuditActionLegacyImporterTeamAddOwner,
		AuditActionLegacyImporterTeamCreate,
		AuditActionLegacyImporterUserCreate,
		AuditActionNaisDeployProvisionDeployKey,
		AuditActionNaisNamespaceCreateNamespace,
		AuditActionNaisNamespaceDeleteNamespace,
		AuditActionUsersyncAssignAdminRole,
		AuditActionUsersyncCreate,
		AuditActionUsersyncDelete,
		AuditActionUsersyncListLocal,
		AuditActionUsersyncListRemote,
		AuditActionUsersyncPrepare,
		AuditActionUsersyncRevokeAdminRole,
		AuditActionUsersyncUpdate,
	}
}

type AuditLogsTargetType string

const (
	AuditLogsTargetTypeReconciler     AuditLogsTargetType = "reconciler"
	AuditLogsTargetTypeServiceAccount AuditLogsTargetType = "service_account"
	AuditLogsTargetTypeSystem         AuditLogsTargetType = "system"
	AuditLogsTargetTypeTeam           AuditLogsTargetType = "team"
	AuditLogsTargetTypeUser           AuditLogsTargetType = "user"
)

func (e *AuditLogsTargetType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuditLogsTargetType(s)
	case string:
		*e = AuditLogsTargetType(s)
	default:
		return fmt.Errorf("unsupported scan type for AuditLogsTargetType: %T", src)
	}
	return nil
}

type NullAuditLogsTargetType struct {
	AuditLogsTargetType AuditLogsTargetType
	Valid               bool // Valid is true if AuditLogsTargetType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuditLogsTargetType) Scan(value interface{}) error {
	if value == nil {
		ns.AuditLogsTargetType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuditLogsTargetType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuditLogsTargetType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuditLogsTargetType), nil
}

func (e AuditLogsTargetType) Valid() bool {
	switch e {
	case AuditLogsTargetTypeReconciler,
		AuditLogsTargetTypeServiceAccount,
		AuditLogsTargetTypeSystem,
		AuditLogsTargetTypeTeam,
		AuditLogsTargetTypeUser:
		return true
	}
	return false
}

func AllAuditLogsTargetTypeValues() []AuditLogsTargetType {
	return []AuditLogsTargetType{
		AuditLogsTargetTypeReconciler,
		AuditLogsTargetTypeServiceAccount,
		AuditLogsTargetTypeSystem,
		AuditLogsTargetTypeTeam,
		AuditLogsTargetTypeUser,
	}
}

type ReconcilerConfigKey string

const (
	ReconcilerConfigKeyAzureClientID     ReconcilerConfigKey = "azure:client_id"
	ReconcilerConfigKeyAzureClientSecret ReconcilerConfigKey = "azure:client_secret"
	ReconcilerConfigKeyAzureTenantID     ReconcilerConfigKey = "azure:tenant_id"
)

func (e *ReconcilerConfigKey) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReconcilerConfigKey(s)
	case string:
		*e = ReconcilerConfigKey(s)
	default:
		return fmt.Errorf("unsupported scan type for ReconcilerConfigKey: %T", src)
	}
	return nil
}

type NullReconcilerConfigKey struct {
	ReconcilerConfigKey ReconcilerConfigKey
	Valid               bool // Valid is true if ReconcilerConfigKey is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReconcilerConfigKey) Scan(value interface{}) error {
	if value == nil {
		ns.ReconcilerConfigKey, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReconcilerConfigKey.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReconcilerConfigKey) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReconcilerConfigKey), nil
}

func (e ReconcilerConfigKey) Valid() bool {
	switch e {
	case ReconcilerConfigKeyAzureClientID,
		ReconcilerConfigKeyAzureClientSecret,
		ReconcilerConfigKeyAzureTenantID:
		return true
	}
	return false
}

func AllReconcilerConfigKeyValues() []ReconcilerConfigKey {
	return []ReconcilerConfigKey{
		ReconcilerConfigKeyAzureClientID,
		ReconcilerConfigKeyAzureClientSecret,
		ReconcilerConfigKeyAzureTenantID,
	}
}

type ReconcilerName string

const (
	ReconcilerNameAzureGroup           ReconcilerName = "azure:group"
	ReconcilerNameGithubTeam           ReconcilerName = "github:team"
	ReconcilerNameGoogleGcpGar         ReconcilerName = "google:gcp:gar"
	ReconcilerNameGoogleGcpProject     ReconcilerName = "google:gcp:project"
	ReconcilerNameGoogleWorkspaceAdmin ReconcilerName = "google:workspace-admin"
	ReconcilerNameNaisDependencytrack  ReconcilerName = "nais:dependencytrack"
	ReconcilerNameNaisDeploy           ReconcilerName = "nais:deploy"
	ReconcilerNameNaisNamespace        ReconcilerName = "nais:namespace"
)

func (e *ReconcilerName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReconcilerName(s)
	case string:
		*e = ReconcilerName(s)
	default:
		return fmt.Errorf("unsupported scan type for ReconcilerName: %T", src)
	}
	return nil
}

type NullReconcilerName struct {
	ReconcilerName ReconcilerName
	Valid          bool // Valid is true if ReconcilerName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReconcilerName) Scan(value interface{}) error {
	if value == nil {
		ns.ReconcilerName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReconcilerName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReconcilerName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReconcilerName), nil
}

func (e ReconcilerName) Valid() bool {
	switch e {
	case ReconcilerNameAzureGroup,
		ReconcilerNameGithubTeam,
		ReconcilerNameGoogleGcpGar,
		ReconcilerNameGoogleGcpProject,
		ReconcilerNameGoogleWorkspaceAdmin,
		ReconcilerNameNaisDependencytrack,
		ReconcilerNameNaisDeploy,
		ReconcilerNameNaisNamespace:
		return true
	}
	return false
}

func AllReconcilerNameValues() []ReconcilerName {
	return []ReconcilerName{
		ReconcilerNameAzureGroup,
		ReconcilerNameGithubTeam,
		ReconcilerNameGoogleGcpGar,
		ReconcilerNameGoogleGcpProject,
		ReconcilerNameGoogleWorkspaceAdmin,
		ReconcilerNameNaisDependencytrack,
		ReconcilerNameNaisDeploy,
		ReconcilerNameNaisNamespace,
	}
}

type RoleName string

const (
	RoleNameAdmin                 RoleName = "Admin"
	RoleNameDeploykeyviewer       RoleName = "Deploy key viewer"
	RoleNameServiceaccountcreator RoleName = "Service account creator"
	RoleNameServiceaccountowner   RoleName = "Service account owner"
	RoleNameSynchronizer          RoleName = "Synchronizer"
	RoleNameTeamcreator           RoleName = "Team creator"
	RoleNameTeammember            RoleName = "Team member"
	RoleNameTeamowner             RoleName = "Team owner"
	RoleNameTeamviewer            RoleName = "Team viewer"
	RoleNameUseradmin             RoleName = "User admin"
	RoleNameUserviewer            RoleName = "User viewer"
)

func (e *RoleName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleName(s)
	case string:
		*e = RoleName(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleName: %T", src)
	}
	return nil
}

type NullRoleName struct {
	RoleName RoleName
	Valid    bool // Valid is true if RoleName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleName) Scan(value interface{}) error {
	if value == nil {
		ns.RoleName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleName), nil
}

func (e RoleName) Valid() bool {
	switch e {
	case RoleNameAdmin,
		RoleNameDeploykeyviewer,
		RoleNameServiceaccountcreator,
		RoleNameServiceaccountowner,
		RoleNameSynchronizer,
		RoleNameTeamcreator,
		RoleNameTeammember,
		RoleNameTeamowner,
		RoleNameTeamviewer,
		RoleNameUseradmin,
		RoleNameUserviewer:
		return true
	}
	return false
}

func AllRoleNameValues() []RoleName {
	return []RoleName{
		RoleNameAdmin,
		RoleNameDeploykeyviewer,
		RoleNameServiceaccountcreator,
		RoleNameServiceaccountowner,
		RoleNameSynchronizer,
		RoleNameTeamcreator,
		RoleNameTeammember,
		RoleNameTeamowner,
		RoleNameTeamviewer,
		RoleNameUseradmin,
		RoleNameUserviewer,
	}
}

type SystemName string

const (
	SystemNameAuthn                SystemName = "authn"
	SystemNameAzureGroup           SystemName = "azure:group"
	SystemNameConsole              SystemName = "console"
	SystemNameGithubTeam           SystemName = "github:team"
	SystemNameGoogleGcpGar         SystemName = "google:gcp:gar"
	SystemNameGoogleGcpProject     SystemName = "google:gcp:project"
	SystemNameGoogleWorkspaceAdmin SystemName = "google:workspace-admin"
	SystemNameGraphqlApi           SystemName = "graphql-api"
	SystemNameLegacyImporter       SystemName = "legacy-importer"
	SystemNameNaisDeploy           SystemName = "nais:deploy"
	SystemNameNaisDependencytrack  SystemName = "nais:dependencytrack"
	SystemNameNaisNamespace        SystemName = "nais:namespace"
	SystemNameUsersync             SystemName = "usersync"
)

func (e *SystemName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SystemName(s)
	case string:
		*e = SystemName(s)
	default:
		return fmt.Errorf("unsupported scan type for SystemName: %T", src)
	}
	return nil
}

type NullSystemName struct {
	SystemName SystemName
	Valid      bool // Valid is true if SystemName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSystemName) Scan(value interface{}) error {
	if value == nil {
		ns.SystemName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SystemName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSystemName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SystemName), nil
}

func (e SystemName) Valid() bool {
	switch e {
	case SystemNameAuthn,
		SystemNameAzureGroup,
		SystemNameConsole,
		SystemNameGithubTeam,
		SystemNameGoogleGcpGar,
		SystemNameGoogleGcpProject,
		SystemNameGoogleWorkspaceAdmin,
		SystemNameGraphqlApi,
		SystemNameLegacyImporter,
		SystemNameNaisDeploy,
		SystemNameNaisDependencytrack,
		SystemNameNaisNamespace,
		SystemNameUsersync:
		return true
	}
	return false
}

func AllSystemNameValues() []SystemName {
	return []SystemName{
		SystemNameAuthn,
		SystemNameAzureGroup,
		SystemNameConsole,
		SystemNameGithubTeam,
		SystemNameGoogleGcpGar,
		SystemNameGoogleGcpProject,
		SystemNameGoogleWorkspaceAdmin,
		SystemNameGraphqlApi,
		SystemNameLegacyImporter,
		SystemNameNaisDeploy,
		SystemNameNaisDependencytrack,
		SystemNameNaisNamespace,
		SystemNameUsersync,
	}
}

type ApiKey struct {
	ApiKey           string
	ServiceAccountID uuid.UUID
}

type AuditLog struct {
	ID               uuid.UUID
	CreatedAt        time.Time
	CorrelationID    uuid.UUID
	SystemName       SystemName
	Actor            *string
	Action           AuditAction
	Message          string
	TargetType       AuditLogsTargetType
	TargetIdentifier string
}

type FirstRun struct {
	FirstRun bool
}

type Reconciler struct {
	Name        ReconcilerName
	DisplayName string
	Description string
	Enabled     bool
	RunOrder    int32
}

type ReconcilerConfig struct {
	Reconciler  ReconcilerName
	Key         ReconcilerConfigKey
	DisplayName string
	Description string
	Value       *string
	Secret      bool
}

type ReconcilerError struct {
	ID            int64
	CorrelationID uuid.UUID
	Reconciler    ReconcilerName
	CreatedAt     time.Time
	ErrorMessage  string
	TeamSlug      slug.Slug
}

type ReconcilerOptOut struct {
	TeamSlug       slug.Slug
	UserID         uuid.UUID
	ReconcilerName ReconcilerName
}

type ReconcilerState struct {
	Reconciler ReconcilerName
	State      pgtype.JSONB
	TeamSlug   slug.Slug
}

type ServiceAccount struct {
	ID   uuid.UUID
	Name string
}

type ServiceAccountRole struct {
	ID                     int32
	RoleName               RoleName
	ServiceAccountID       uuid.UUID
	TargetTeamSlug         *slug.Slug
	TargetServiceAccountID *uuid.UUID
}

type Session struct {
	ID      uuid.UUID
	UserID  uuid.UUID
	Expires time.Time
}

type SlackAlertsChannel struct {
	TeamSlug    slug.Slug
	Environment string
	ChannelName string
}

type Team struct {
	Slug               slug.Slug
	Purpose            string
	LastSuccessfulSync *time.Time
	SlackChannel       string
}

type TeamDeleteKey struct {
	Key         uuid.UUID
	TeamSlug    slug.Slug
	CreatedAt   time.Time
	CreatedBy   uuid.UUID
	ConfirmedAt *time.Time
}

type User struct {
	ID         uuid.UUID
	Email      string
	Name       string
	ExternalID string
}

type UserRole struct {
	ID                     int32
	RoleName               RoleName
	UserID                 uuid.UUID
	TargetTeamSlug         *slug.Slug
	TargetServiceAccountID *uuid.UUID
}
