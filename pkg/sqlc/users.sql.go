// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, external_id)
VALUES ($1, LOWER($2), $3)
RETURNING id, email, name, external_id
`

type CreateUserParams struct {
	Name       string
	Email      string
	ExternalID string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.ExternalID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, email, name, external_id FROM users
ORDER BY name ASC
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, external_id FROM users
WHERE email = LOWER($1)
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const getUserByExternalID = `-- name: GetUserByExternalID :one
SELECT id, email, name, external_id FROM users
WHERE external_id = $1
`

func (q *Queries) GetUserByExternalID(ctx context.Context, externalID string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByExternalID, externalID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, external_id FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}

const getUserTeams = `-- name: GetUserTeams :many
SELECT teams.slug, teams.purpose, teams.last_successful_sync, teams.slack_channel, user_roles.role_name FROM user_roles
JOIN teams ON teams.slug = user_roles.target_team_slug
WHERE user_roles.user_id = $1
ORDER BY teams.slug ASC
LIMIT $2 OFFSET $3
`

type GetUserTeamsParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

type GetUserTeamsRow struct {
	Team     Team
	RoleName RoleName
}

func (q *Queries) GetUserTeams(ctx context.Context, arg GetUserTeamsParams) ([]*GetUserTeamsRow, error) {
	rows, err := q.db.Query(ctx, getUserTeams, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUserTeamsRow
	for rows.Next() {
		var i GetUserTeamsRow
		if err := rows.Scan(
			&i.Team.Slug,
			&i.Team.Purpose,
			&i.Team.LastSuccessfulSync,
			&i.Team.SlackChannel,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTeamsCount = `-- name: GetUserTeamsCount :one
SELECT COUNT (*) FROM user_roles
WHERE user_roles.user_id = $1
`

func (q *Queries) GetUserTeamsCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getUserTeamsCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, name, external_id FROM users
ORDER BY name ASC LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT count (*) FROM users
`

func (q *Queries) GetUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $1, email = LOWER($4), external_id = $2
WHERE id = $3
RETURNING id, email, name, external_id
`

type UpdateUserParams struct {
	Name       string
	ExternalID string
	ID         uuid.UUID
	Email      string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.ExternalID,
		arg.ID,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
	)
	return &i, err
}
