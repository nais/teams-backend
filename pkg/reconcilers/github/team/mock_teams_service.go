// Code generated by mockery v2.14.0. DO NOT EDIT.

package github_team_reconciler

import (
	context "context"

	github "github.com/google/go-github/v50/github"
	mock "github.com/stretchr/testify/mock"
)

// MockTeamsService is an autogenerated mock type for the TeamsService type
type MockTeamsService struct {
	mock.Mock
}

// AddTeamMembershipBySlug provides a mock function with given fields: ctx, org, slug, user, opts
func (_m *MockTeamsService) AddTeamMembershipBySlug(ctx context.Context, org string, slug string, user string, opts *github.TeamAddTeamMembershipOptions) (*github.Membership, *github.Response, error) {
	ret := _m.Called(ctx, org, slug, user, opts)

	var r0 *github.Membership
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.TeamAddTeamMembershipOptions) *github.Membership); ok {
		r0 = rf(ctx, org, slug, user, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Membership)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.TeamAddTeamMembershipOptions) *github.Response); ok {
		r1 = rf(ctx, org, slug, user, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.TeamAddTeamMembershipOptions) error); ok {
		r2 = rf(ctx, org, slug, user, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateOrUpdateIDPGroupConnectionsBySlug provides a mock function with given fields: ctx, org, team, opts
func (_m *MockTeamsService) CreateOrUpdateIDPGroupConnectionsBySlug(ctx context.Context, org string, team string, opts github.IDPGroupList) (*github.IDPGroupList, *github.Response, error) {
	ret := _m.Called(ctx, org, team, opts)

	var r0 *github.IDPGroupList
	if rf, ok := ret.Get(0).(func(context.Context, string, string, github.IDPGroupList) *github.IDPGroupList); ok {
		r0 = rf(ctx, org, team, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.IDPGroupList)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, github.IDPGroupList) *github.Response); ok {
		r1 = rf(ctx, org, team, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, github.IDPGroupList) error); ok {
		r2 = rf(ctx, org, team, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateTeam provides a mock function with given fields: ctx, org, team
func (_m *MockTeamsService) CreateTeam(ctx context.Context, org string, team github.NewTeam) (*github.Team, *github.Response, error) {
	ret := _m.Called(ctx, org, team)

	var r0 *github.Team
	if rf, ok := ret.Get(0).(func(context.Context, string, github.NewTeam) *github.Team); ok {
		r0 = rf(ctx, org, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Team)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, github.NewTeam) *github.Response); ok {
		r1 = rf(ctx, org, team)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, github.NewTeam) error); ok {
		r2 = rf(ctx, org, team)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EditTeamBySlug provides a mock function with given fields: ctx, org, slug, team, removeParent
func (_m *MockTeamsService) EditTeamBySlug(ctx context.Context, org string, slug string, team github.NewTeam, removeParent bool) (*github.Team, *github.Response, error) {
	ret := _m.Called(ctx, org, slug, team, removeParent)

	var r0 *github.Team
	if rf, ok := ret.Get(0).(func(context.Context, string, string, github.NewTeam, bool) *github.Team); ok {
		r0 = rf(ctx, org, slug, team, removeParent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Team)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, github.NewTeam, bool) *github.Response); ok {
		r1 = rf(ctx, org, slug, team, removeParent)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, github.NewTeam, bool) error); ok {
		r2 = rf(ctx, org, slug, team, removeParent)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTeamBySlug provides a mock function with given fields: ctx, org, slug
func (_m *MockTeamsService) GetTeamBySlug(ctx context.Context, org string, slug string) (*github.Team, *github.Response, error) {
	ret := _m.Called(ctx, org, slug)

	var r0 *github.Team
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.Team); ok {
		r0 = rf(ctx, org, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Team)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(ctx, org, slug)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, org, slug)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTeamMembersBySlug provides a mock function with given fields: ctx, org, slug, opts
func (_m *MockTeamsService) ListTeamMembersBySlug(ctx context.Context, org string, slug string, opts *github.TeamListTeamMembersOptions) ([]*github.User, *github.Response, error) {
	ret := _m.Called(ctx, org, slug, opts)

	var r0 []*github.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.TeamListTeamMembersOptions) []*github.User); ok {
		r0 = rf(ctx, org, slug, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.User)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.TeamListTeamMembersOptions) *github.Response); ok {
		r1 = rf(ctx, org, slug, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.TeamListTeamMembersOptions) error); ok {
		r2 = rf(ctx, org, slug, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTeamReposBySlug provides a mock function with given fields: ctx, org, slug, opts
func (_m *MockTeamsService) ListTeamReposBySlug(ctx context.Context, org string, slug string, opts *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	ret := _m.Called(ctx, org, slug, opts)

	var r0 []*github.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.Repository); ok {
		r0 = rf(ctx, org, slug, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(ctx, org, slug, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(ctx, org, slug, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveTeamMembershipBySlug provides a mock function with given fields: ctx, org, slug, user
func (_m *MockTeamsService) RemoveTeamMembershipBySlug(ctx context.Context, org string, slug string, user string) (*github.Response, error) {
	ret := _m.Called(ctx, org, slug, user)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(ctx, org, slug, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, org, slug, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTeamsService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTeamsService creates a new instance of MockTeamsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTeamsService(t mockConstructorTestingTNewMockTeamsService) *MockTeamsService {
	mock := &MockTeamsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
