// Code generated by mockery v2.14.0. DO NOT EDIT.

package reconcilers

import (
	context "context"

	sqlc "github.com/nais/console/pkg/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// MockReconciler is an autogenerated mock type for the Reconciler type
type MockReconciler struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *MockReconciler) Name() sqlc.ReconcilerName {
	ret := _m.Called()

	var r0 sqlc.ReconcilerName
	if rf, ok := ret.Get(0).(func() sqlc.ReconcilerName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sqlc.ReconcilerName)
	}

	return r0
}

// Reconcile provides a mock function with given fields: ctx, input
func (_m *MockReconciler) Reconcile(ctx context.Context, input Input) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Input) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockReconciler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockReconciler creates a new instance of MockReconciler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockReconciler(t mockConstructorTestingTNewMockReconciler) *MockReconciler {
	mock := &MockReconciler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
