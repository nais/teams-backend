// Code generated by mockery. DO NOT EDIT.

package db

import (
	context "context"

	slug "github.com/nais/teams-backend/pkg/slug"
	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/nais/teams-backend/pkg/sqlc"

	types "github.com/nais/teams-backend/pkg/types"

	uuid "github.com/google/uuid"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// AddReconcilerOptOut provides a mock function with given fields: ctx, userID, teamSlug, reconcilerName
func (_m *MockDatabase) AddReconcilerOptOut(ctx context.Context, userID *uuid.UUID, teamSlug *slug.Slug, reconcilerName sqlc.ReconcilerName) error {
	ret := _m.Called(ctx, userID, teamSlug, reconcilerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, *slug.Slug, sqlc.ReconcilerName) error); ok {
		r0 = rf(ctx, userID, teamSlug, reconcilerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AddReconcilerOptOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReconcilerOptOut'
type MockDatabase_AddReconcilerOptOut_Call struct {
	*mock.Call
}

// AddReconcilerOptOut is a helper method to define mock.On call
//   - ctx context.Context
//   - userID *uuid.UUID
//   - teamSlug *slug.Slug
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) AddReconcilerOptOut(ctx interface{}, userID interface{}, teamSlug interface{}, reconcilerName interface{}) *MockDatabase_AddReconcilerOptOut_Call {
	return &MockDatabase_AddReconcilerOptOut_Call{Call: _e.mock.On("AddReconcilerOptOut", ctx, userID, teamSlug, reconcilerName)}
}

func (_c *MockDatabase_AddReconcilerOptOut_Call) Run(run func(ctx context.Context, userID *uuid.UUID, teamSlug *slug.Slug, reconcilerName sqlc.ReconcilerName)) *MockDatabase_AddReconcilerOptOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(*slug.Slug), args[3].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_AddReconcilerOptOut_Call) Return(_a0 error) *MockDatabase_AddReconcilerOptOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AddReconcilerOptOut_Call) RunAndReturn(run func(context.Context, *uuid.UUID, *slug.Slug, sqlc.ReconcilerName) error) *MockDatabase_AddReconcilerOptOut_Call {
	_c.Call.Return(run)
	return _c
}

// AssignGlobalRoleToServiceAccount provides a mock function with given fields: ctx, serviceAccountID, roleName
func (_m *MockDatabase) AssignGlobalRoleToServiceAccount(ctx context.Context, serviceAccountID uuid.UUID, roleName sqlc.RoleName) error {
	ret := _m.Called(ctx, serviceAccountID, roleName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, sqlc.RoleName) error); ok {
		r0 = rf(ctx, serviceAccountID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AssignGlobalRoleToServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignGlobalRoleToServiceAccount'
type MockDatabase_AssignGlobalRoleToServiceAccount_Call struct {
	*mock.Call
}

// AssignGlobalRoleToServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
//   - roleName sqlc.RoleName
func (_e *MockDatabase_Expecter) AssignGlobalRoleToServiceAccount(ctx interface{}, serviceAccountID interface{}, roleName interface{}) *MockDatabase_AssignGlobalRoleToServiceAccount_Call {
	return &MockDatabase_AssignGlobalRoleToServiceAccount_Call{Call: _e.mock.On("AssignGlobalRoleToServiceAccount", ctx, serviceAccountID, roleName)}
}

func (_c *MockDatabase_AssignGlobalRoleToServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID, roleName sqlc.RoleName)) *MockDatabase_AssignGlobalRoleToServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(sqlc.RoleName))
	})
	return _c
}

func (_c *MockDatabase_AssignGlobalRoleToServiceAccount_Call) Return(_a0 error) *MockDatabase_AssignGlobalRoleToServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AssignGlobalRoleToServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID, sqlc.RoleName) error) *MockDatabase_AssignGlobalRoleToServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// AssignGlobalRoleToUser provides a mock function with given fields: ctx, userID, roleName
func (_m *MockDatabase) AssignGlobalRoleToUser(ctx context.Context, userID uuid.UUID, roleName sqlc.RoleName) error {
	ret := _m.Called(ctx, userID, roleName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, sqlc.RoleName) error); ok {
		r0 = rf(ctx, userID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AssignGlobalRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignGlobalRoleToUser'
type MockDatabase_AssignGlobalRoleToUser_Call struct {
	*mock.Call
}

// AssignGlobalRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - roleName sqlc.RoleName
func (_e *MockDatabase_Expecter) AssignGlobalRoleToUser(ctx interface{}, userID interface{}, roleName interface{}) *MockDatabase_AssignGlobalRoleToUser_Call {
	return &MockDatabase_AssignGlobalRoleToUser_Call{Call: _e.mock.On("AssignGlobalRoleToUser", ctx, userID, roleName)}
}

func (_c *MockDatabase_AssignGlobalRoleToUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, roleName sqlc.RoleName)) *MockDatabase_AssignGlobalRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(sqlc.RoleName))
	})
	return _c
}

func (_c *MockDatabase_AssignGlobalRoleToUser_Call) Return(_a0 error) *MockDatabase_AssignGlobalRoleToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AssignGlobalRoleToUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, sqlc.RoleName) error) *MockDatabase_AssignGlobalRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AssignTeamRoleToServiceAccount provides a mock function with given fields: ctx, serviceAccountID, roleName, teamSlug
func (_m *MockDatabase) AssignTeamRoleToServiceAccount(ctx context.Context, serviceAccountID uuid.UUID, roleName sqlc.RoleName, teamSlug slug.Slug) error {
	ret := _m.Called(ctx, serviceAccountID, roleName, teamSlug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, sqlc.RoleName, slug.Slug) error); ok {
		r0 = rf(ctx, serviceAccountID, roleName, teamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_AssignTeamRoleToServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignTeamRoleToServiceAccount'
type MockDatabase_AssignTeamRoleToServiceAccount_Call struct {
	*mock.Call
}

// AssignTeamRoleToServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
//   - roleName sqlc.RoleName
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) AssignTeamRoleToServiceAccount(ctx interface{}, serviceAccountID interface{}, roleName interface{}, teamSlug interface{}) *MockDatabase_AssignTeamRoleToServiceAccount_Call {
	return &MockDatabase_AssignTeamRoleToServiceAccount_Call{Call: _e.mock.On("AssignTeamRoleToServiceAccount", ctx, serviceAccountID, roleName, teamSlug)}
}

func (_c *MockDatabase_AssignTeamRoleToServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID, roleName sqlc.RoleName, teamSlug slug.Slug)) *MockDatabase_AssignTeamRoleToServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(sqlc.RoleName), args[3].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_AssignTeamRoleToServiceAccount_Call) Return(_a0 error) *MockDatabase_AssignTeamRoleToServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_AssignTeamRoleToServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID, sqlc.RoleName, slug.Slug) error) *MockDatabase_AssignTeamRoleToServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// ClearReconcilerErrorsForTeam provides a mock function with given fields: ctx, _a1, reconcilerName
func (_m *MockDatabase) ClearReconcilerErrorsForTeam(ctx context.Context, _a1 slug.Slug, reconcilerName sqlc.ReconcilerName) error {
	ret := _m.Called(ctx, _a1, reconcilerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, sqlc.ReconcilerName) error); ok {
		r0 = rf(ctx, _a1, reconcilerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_ClearReconcilerErrorsForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearReconcilerErrorsForTeam'
type MockDatabase_ClearReconcilerErrorsForTeam_Call struct {
	*mock.Call
}

// ClearReconcilerErrorsForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 slug.Slug
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) ClearReconcilerErrorsForTeam(ctx interface{}, _a1 interface{}, reconcilerName interface{}) *MockDatabase_ClearReconcilerErrorsForTeam_Call {
	return &MockDatabase_ClearReconcilerErrorsForTeam_Call{Call: _e.mock.On("ClearReconcilerErrorsForTeam", ctx, _a1, reconcilerName)}
}

func (_c *MockDatabase_ClearReconcilerErrorsForTeam_Call) Run(run func(ctx context.Context, _a1 slug.Slug, reconcilerName sqlc.ReconcilerName)) *MockDatabase_ClearReconcilerErrorsForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_ClearReconcilerErrorsForTeam_Call) Return(_a0 error) *MockDatabase_ClearReconcilerErrorsForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_ClearReconcilerErrorsForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug, sqlc.ReconcilerName) error) *MockDatabase_ClearReconcilerErrorsForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigureReconciler provides a mock function with given fields: ctx, reconcilerName, key, value
func (_m *MockDatabase) ConfigureReconciler(ctx context.Context, reconcilerName sqlc.ReconcilerName, key sqlc.ReconcilerConfigKey, value string) error {
	ret := _m.Called(ctx, reconcilerName, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName, sqlc.ReconcilerConfigKey, string) error); ok {
		r0 = rf(ctx, reconcilerName, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_ConfigureReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureReconciler'
type MockDatabase_ConfigureReconciler_Call struct {
	*mock.Call
}

// ConfigureReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
//   - key sqlc.ReconcilerConfigKey
//   - value string
func (_e *MockDatabase_Expecter) ConfigureReconciler(ctx interface{}, reconcilerName interface{}, key interface{}, value interface{}) *MockDatabase_ConfigureReconciler_Call {
	return &MockDatabase_ConfigureReconciler_Call{Call: _e.mock.On("ConfigureReconciler", ctx, reconcilerName, key, value)}
}

func (_c *MockDatabase_ConfigureReconciler_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName, key sqlc.ReconcilerConfigKey, value string)) *MockDatabase_ConfigureReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName), args[2].(sqlc.ReconcilerConfigKey), args[3].(string))
	})
	return _c
}

func (_c *MockDatabase_ConfigureReconciler_Call) Return(_a0 error) *MockDatabase_ConfigureReconciler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_ConfigureReconciler_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName, sqlc.ReconcilerConfigKey, string) error) *MockDatabase_ConfigureReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// ConfirmTeamDeleteKey provides a mock function with given fields: ctx, key
func (_m *MockDatabase) ConfirmTeamDeleteKey(ctx context.Context, key uuid.UUID) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_ConfirmTeamDeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmTeamDeleteKey'
type MockDatabase_ConfirmTeamDeleteKey_Call struct {
	*mock.Call
}

// ConfirmTeamDeleteKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key uuid.UUID
func (_e *MockDatabase_Expecter) ConfirmTeamDeleteKey(ctx interface{}, key interface{}) *MockDatabase_ConfirmTeamDeleteKey_Call {
	return &MockDatabase_ConfirmTeamDeleteKey_Call{Call: _e.mock.On("ConfirmTeamDeleteKey", ctx, key)}
}

func (_c *MockDatabase_ConfirmTeamDeleteKey_Call) Run(run func(ctx context.Context, key uuid.UUID)) *MockDatabase_ConfirmTeamDeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_ConfirmTeamDeleteKey_Call) Return(_a0 error) *MockDatabase_ConfirmTeamDeleteKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_ConfirmTeamDeleteKey_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_ConfirmTeamDeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAPIKey provides a mock function with given fields: ctx, apiKey, serviceAccountID
func (_m *MockDatabase) CreateAPIKey(ctx context.Context, apiKey string, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, apiKey, serviceAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) error); ok {
		r0 = rf(ctx, apiKey, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type MockDatabase_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - apiKey string
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) CreateAPIKey(ctx interface{}, apiKey interface{}, serviceAccountID interface{}) *MockDatabase_CreateAPIKey_Call {
	return &MockDatabase_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey", ctx, apiKey, serviceAccountID)}
}

func (_c *MockDatabase_CreateAPIKey_Call) Run(run func(ctx context.Context, apiKey string, serviceAccountID uuid.UUID)) *MockDatabase_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_CreateAPIKey_Call) Return(_a0 error) *MockDatabase_CreateAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_CreateAPIKey_Call) RunAndReturn(run func(context.Context, string, uuid.UUID) error) *MockDatabase_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuditLogEntry provides a mock function with given fields: ctx, correlationID, componentName, actor, targetType, targetIdentifier, action, message
func (_m *MockDatabase) CreateAuditLogEntry(ctx context.Context, correlationID uuid.UUID, componentName types.ComponentName, actor *string, targetType types.AuditLogsTargetType, targetIdentifier string, action types.AuditAction, message string) error {
	ret := _m.Called(ctx, correlationID, componentName, actor, targetType, targetIdentifier, action, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.ComponentName, *string, types.AuditLogsTargetType, string, types.AuditAction, string) error); ok {
		r0 = rf(ctx, correlationID, componentName, actor, targetType, targetIdentifier, action, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_CreateAuditLogEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuditLogEntry'
type MockDatabase_CreateAuditLogEntry_Call struct {
	*mock.Call
}

// CreateAuditLogEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - correlationID uuid.UUID
//   - componentName types.ComponentName
//   - actor *string
//   - targetType types.AuditLogsTargetType
//   - targetIdentifier string
//   - action types.AuditAction
//   - message string
func (_e *MockDatabase_Expecter) CreateAuditLogEntry(ctx interface{}, correlationID interface{}, componentName interface{}, actor interface{}, targetType interface{}, targetIdentifier interface{}, action interface{}, message interface{}) *MockDatabase_CreateAuditLogEntry_Call {
	return &MockDatabase_CreateAuditLogEntry_Call{Call: _e.mock.On("CreateAuditLogEntry", ctx, correlationID, componentName, actor, targetType, targetIdentifier, action, message)}
}

func (_c *MockDatabase_CreateAuditLogEntry_Call) Run(run func(ctx context.Context, correlationID uuid.UUID, componentName types.ComponentName, actor *string, targetType types.AuditLogsTargetType, targetIdentifier string, action types.AuditAction, message string)) *MockDatabase_CreateAuditLogEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(types.ComponentName), args[3].(*string), args[4].(types.AuditLogsTargetType), args[5].(string), args[6].(types.AuditAction), args[7].(string))
	})
	return _c
}

func (_c *MockDatabase_CreateAuditLogEntry_Call) Return(_a0 error) *MockDatabase_CreateAuditLogEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_CreateAuditLogEntry_Call) RunAndReturn(run func(context.Context, uuid.UUID, types.ComponentName, *string, types.AuditLogsTargetType, string, types.AuditAction, string) error) *MockDatabase_CreateAuditLogEntry_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepositoryAuthorization provides a mock function with given fields: ctx, teamSlug, repoName, authorization
func (_m *MockDatabase) CreateRepositoryAuthorization(ctx context.Context, teamSlug slug.Slug, repoName string, authorization sqlc.RepositoryAuthorizationEnum) error {
	ret := _m.Called(ctx, teamSlug, repoName, authorization)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, sqlc.RepositoryAuthorizationEnum) error); ok {
		r0 = rf(ctx, teamSlug, repoName, authorization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_CreateRepositoryAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepositoryAuthorization'
type MockDatabase_CreateRepositoryAuthorization_Call struct {
	*mock.Call
}

// CreateRepositoryAuthorization is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - repoName string
//   - authorization sqlc.RepositoryAuthorizationEnum
func (_e *MockDatabase_Expecter) CreateRepositoryAuthorization(ctx interface{}, teamSlug interface{}, repoName interface{}, authorization interface{}) *MockDatabase_CreateRepositoryAuthorization_Call {
	return &MockDatabase_CreateRepositoryAuthorization_Call{Call: _e.mock.On("CreateRepositoryAuthorization", ctx, teamSlug, repoName, authorization)}
}

func (_c *MockDatabase_CreateRepositoryAuthorization_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, repoName string, authorization sqlc.RepositoryAuthorizationEnum)) *MockDatabase_CreateRepositoryAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(sqlc.RepositoryAuthorizationEnum))
	})
	return _c
}

func (_c *MockDatabase_CreateRepositoryAuthorization_Call) Return(_a0 error) *MockDatabase_CreateRepositoryAuthorization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_CreateRepositoryAuthorization_Call) RunAndReturn(run func(context.Context, slug.Slug, string, sqlc.RepositoryAuthorizationEnum) error) *MockDatabase_CreateRepositoryAuthorization_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccount provides a mock function with given fields: ctx, name
func (_m *MockDatabase) CreateServiceAccount(ctx context.Context, name string) (*ServiceAccount, error) {
	ret := _m.Called(ctx, name)

	var r0 *ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ServiceAccount, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceAccount); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type MockDatabase_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) CreateServiceAccount(ctx interface{}, name interface{}) *MockDatabase_CreateServiceAccount_Call {
	return &MockDatabase_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", ctx, name)}
}

func (_c *MockDatabase_CreateServiceAccount_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_CreateServiceAccount_Call) Return(_a0 *ServiceAccount, _a1 error) *MockDatabase_CreateServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateServiceAccount_Call) RunAndReturn(run func(context.Context, string) (*ServiceAccount, error)) *MockDatabase_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSession provides a mock function with given fields: ctx, userID
func (_m *MockDatabase) CreateSession(ctx context.Context, userID uuid.UUID) (*Session, error) {
	ret := _m.Called(ctx, userID)

	var r0 *Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Session, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Session); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockDatabase_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) CreateSession(ctx interface{}, userID interface{}) *MockDatabase_CreateSession_Call {
	return &MockDatabase_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userID)}
}

func (_c *MockDatabase_CreateSession_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDatabase_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_CreateSession_Call) Return(_a0 *Session, _a1 error) *MockDatabase_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Session, error)) *MockDatabase_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function with given fields: ctx, _a1, purpose, slackChannel
func (_m *MockDatabase) CreateTeam(ctx context.Context, _a1 slug.Slug, purpose string, slackChannel string) (*Team, error) {
	ret := _m.Called(ctx, _a1, purpose, slackChannel)

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, string) (*Team, error)); ok {
		return rf(ctx, _a1, purpose, slackChannel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, string) *Team); ok {
		r0 = rf(ctx, _a1, purpose, slackChannel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, string, string) error); ok {
		r1 = rf(ctx, _a1, purpose, slackChannel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockDatabase_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 slug.Slug
//   - purpose string
//   - slackChannel string
func (_e *MockDatabase_Expecter) CreateTeam(ctx interface{}, _a1 interface{}, purpose interface{}, slackChannel interface{}) *MockDatabase_CreateTeam_Call {
	return &MockDatabase_CreateTeam_Call{Call: _e.mock.On("CreateTeam", ctx, _a1, purpose, slackChannel)}
}

func (_c *MockDatabase_CreateTeam_Call) Run(run func(ctx context.Context, _a1 slug.Slug, purpose string, slackChannel string)) *MockDatabase_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatabase_CreateTeam_Call) Return(_a0 *Team, _a1 error) *MockDatabase_CreateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateTeam_Call) RunAndReturn(run func(context.Context, slug.Slug, string, string) (*Team, error)) *MockDatabase_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeamDeleteKey provides a mock function with given fields: ctx, teamSlug, userID
func (_m *MockDatabase) CreateTeamDeleteKey(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID) (*TeamDeleteKey, error) {
	ret := _m.Called(ctx, teamSlug, userID)

	var r0 *TeamDeleteKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID) (*TeamDeleteKey, error)); ok {
		return rf(ctx, teamSlug, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID) *TeamDeleteKey); ok {
		r0 = rf(ctx, teamSlug, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeamDeleteKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, uuid.UUID) error); ok {
		r1 = rf(ctx, teamSlug, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateTeamDeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeamDeleteKey'
type MockDatabase_CreateTeamDeleteKey_Call struct {
	*mock.Call
}

// CreateTeamDeleteKey is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) CreateTeamDeleteKey(ctx interface{}, teamSlug interface{}, userID interface{}) *MockDatabase_CreateTeamDeleteKey_Call {
	return &MockDatabase_CreateTeamDeleteKey_Call{Call: _e.mock.On("CreateTeamDeleteKey", ctx, teamSlug, userID)}
}

func (_c *MockDatabase_CreateTeamDeleteKey_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID)) *MockDatabase_CreateTeamDeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_CreateTeamDeleteKey_Call) Return(_a0 *TeamDeleteKey, _a1 error) *MockDatabase_CreateTeamDeleteKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateTeamDeleteKey_Call) RunAndReturn(run func(context.Context, slug.Slug, uuid.UUID) (*TeamDeleteKey, error)) *MockDatabase_CreateTeamDeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, name, email, externalID
func (_m *MockDatabase) CreateUser(ctx context.Context, name string, email string, externalID string) (*User, error) {
	ret := _m.Called(ctx, name, email, externalID)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*User, error)); ok {
		return rf(ctx, name, email, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *User); ok {
		r0 = rf(ctx, name, email, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, email, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockDatabase_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
//   - externalID string
func (_e *MockDatabase_Expecter) CreateUser(ctx interface{}, name interface{}, email interface{}, externalID interface{}) *MockDatabase_CreateUser_Call {
	return &MockDatabase_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, name, email, externalID)}
}

func (_c *MockDatabase_CreateUser_Call) Run(run func(ctx context.Context, name string, email string, externalID string)) *MockDatabase_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatabase_CreateUser_Call) Return(_a0 *User, _a1 error) *MockDatabase_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*User, error)) *MockDatabase_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DangerousGetReconcilerConfigValues provides a mock function with given fields: ctx, reconcilerName
func (_m *MockDatabase) DangerousGetReconcilerConfigValues(ctx context.Context, reconcilerName sqlc.ReconcilerName) (*ReconcilerConfigValues, error) {
	ret := _m.Called(ctx, reconcilerName)

	var r0 *ReconcilerConfigValues
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) (*ReconcilerConfigValues, error)); ok {
		return rf(ctx, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) *ReconcilerConfigValues); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReconcilerConfigValues)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ReconcilerName) error); ok {
		r1 = rf(ctx, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_DangerousGetReconcilerConfigValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DangerousGetReconcilerConfigValues'
type MockDatabase_DangerousGetReconcilerConfigValues_Call struct {
	*mock.Call
}

// DangerousGetReconcilerConfigValues is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) DangerousGetReconcilerConfigValues(ctx interface{}, reconcilerName interface{}) *MockDatabase_DangerousGetReconcilerConfigValues_Call {
	return &MockDatabase_DangerousGetReconcilerConfigValues_Call{Call: _e.mock.On("DangerousGetReconcilerConfigValues", ctx, reconcilerName)}
}

func (_c *MockDatabase_DangerousGetReconcilerConfigValues_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName)) *MockDatabase_DangerousGetReconcilerConfigValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_DangerousGetReconcilerConfigValues_Call) Return(_a0 *ReconcilerConfigValues, _a1 error) *MockDatabase_DangerousGetReconcilerConfigValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_DangerousGetReconcilerConfigValues_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName) (*ReconcilerConfigValues, error)) *MockDatabase_DangerousGetReconcilerConfigValues_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccount provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockDatabase) DeleteServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, serviceAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccount'
type MockDatabase_DeleteServiceAccount_Call struct {
	*mock.Call
}

// DeleteServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) DeleteServiceAccount(ctx interface{}, serviceAccountID interface{}) *MockDatabase_DeleteServiceAccount_Call {
	return &MockDatabase_DeleteServiceAccount_Call{Call: _e.mock.On("DeleteServiceAccount", ctx, serviceAccountID)}
}

func (_c *MockDatabase_DeleteServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockDatabase_DeleteServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_DeleteServiceAccount_Call) Return(_a0 error) *MockDatabase_DeleteServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_DeleteServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, sessionID
func (_m *MockDatabase) DeleteSession(ctx context.Context, sessionID uuid.UUID) error {
	ret := _m.Called(ctx, sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockDatabase_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *MockDatabase_Expecter) DeleteSession(ctx interface{}, sessionID interface{}) *MockDatabase_DeleteSession_Call {
	return &MockDatabase_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, sessionID)}
}

func (_c *MockDatabase_DeleteSession_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *MockDatabase_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_DeleteSession_Call) Return(_a0 error) *MockDatabase_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, teamSlug
func (_m *MockDatabase) DeleteTeam(ctx context.Context, teamSlug slug.Slug) error {
	ret := _m.Called(ctx, teamSlug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) error); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockDatabase_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) DeleteTeam(ctx interface{}, teamSlug interface{}) *MockDatabase_DeleteTeam_Call {
	return &MockDatabase_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, teamSlug)}
}

func (_c *MockDatabase_DeleteTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockDatabase_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_DeleteTeam_Call) Return(_a0 error) *MockDatabase_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) error) *MockDatabase_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *MockDatabase) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockDatabase_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) DeleteUser(ctx interface{}, userID interface{}) *MockDatabase_DeleteUser_Call {
	return &MockDatabase_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, userID)}
}

func (_c *MockDatabase_DeleteUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDatabase_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_DeleteUser_Call) Return(_a0 error) *MockDatabase_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DeleteUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DisableReconciler provides a mock function with given fields: ctx, reconcilerName
func (_m *MockDatabase) DisableReconciler(ctx context.Context, reconcilerName sqlc.ReconcilerName) (*Reconciler, error) {
	ret := _m.Called(ctx, reconcilerName)

	var r0 *Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) (*Reconciler, error)); ok {
		return rf(ctx, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) *Reconciler); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ReconcilerName) error); ok {
		r1 = rf(ctx, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_DisableReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableReconciler'
type MockDatabase_DisableReconciler_Call struct {
	*mock.Call
}

// DisableReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) DisableReconciler(ctx interface{}, reconcilerName interface{}) *MockDatabase_DisableReconciler_Call {
	return &MockDatabase_DisableReconciler_Call{Call: _e.mock.On("DisableReconciler", ctx, reconcilerName)}
}

func (_c *MockDatabase_DisableReconciler_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName)) *MockDatabase_DisableReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_DisableReconciler_Call) Return(_a0 *Reconciler, _a1 error) *MockDatabase_DisableReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_DisableReconciler_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName) (*Reconciler, error)) *MockDatabase_DisableReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// EnableReconciler provides a mock function with given fields: ctx, reconcilerName
func (_m *MockDatabase) EnableReconciler(ctx context.Context, reconcilerName sqlc.ReconcilerName) (*Reconciler, error) {
	ret := _m.Called(ctx, reconcilerName)

	var r0 *Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) (*Reconciler, error)); ok {
		return rf(ctx, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) *Reconciler); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ReconcilerName) error); ok {
		r1 = rf(ctx, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_EnableReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableReconciler'
type MockDatabase_EnableReconciler_Call struct {
	*mock.Call
}

// EnableReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) EnableReconciler(ctx interface{}, reconcilerName interface{}) *MockDatabase_EnableReconciler_Call {
	return &MockDatabase_EnableReconciler_Call{Call: _e.mock.On("EnableReconciler", ctx, reconcilerName)}
}

func (_c *MockDatabase_EnableReconciler_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName)) *MockDatabase_EnableReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_EnableReconciler_Call) Return(_a0 *Reconciler, _a1 error) *MockDatabase_EnableReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_EnableReconciler_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName) (*Reconciler, error)) *MockDatabase_EnableReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// ExtendSession provides a mock function with given fields: ctx, sessionID
func (_m *MockDatabase) ExtendSession(ctx context.Context, sessionID uuid.UUID) (*Session, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 *Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_ExtendSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtendSession'
type MockDatabase_ExtendSession_Call struct {
	*mock.Call
}

// ExtendSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *MockDatabase_Expecter) ExtendSession(ctx interface{}, sessionID interface{}) *MockDatabase_ExtendSession_Call {
	return &MockDatabase_ExtendSession_Call{Call: _e.mock.On("ExtendSession", ctx, sessionID)}
}

func (_c *MockDatabase_ExtendSession_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *MockDatabase_ExtendSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_ExtendSession_Call) Return(_a0 *Session, _a1 error) *MockDatabase_ExtendSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_ExtendSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Session, error)) *MockDatabase_ExtendSession_Call {
	_c.Call.Return(run)
	return _c
}

// FirstRunComplete provides a mock function with given fields: ctx
func (_m *MockDatabase) FirstRunComplete(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_FirstRunComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstRunComplete'
type MockDatabase_FirstRunComplete_Call struct {
	*mock.Call
}

// FirstRunComplete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) FirstRunComplete(ctx interface{}) *MockDatabase_FirstRunComplete_Call {
	return &MockDatabase_FirstRunComplete_Call{Call: _e.mock.On("FirstRunComplete", ctx)}
}

func (_c *MockDatabase_FirstRunComplete_Call) Run(run func(ctx context.Context)) *MockDatabase_FirstRunComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_FirstRunComplete_Call) Return(_a0 error) *MockDatabase_FirstRunComplete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_FirstRunComplete_Call) RunAndReturn(run func(context.Context) error) *MockDatabase_FirstRunComplete_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveTeamBySlug provides a mock function with given fields: ctx, _a1
func (_m *MockDatabase) GetActiveTeamBySlug(ctx context.Context, _a1 slug.Slug) (*Team, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (*Team, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) *Team); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetActiveTeamBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveTeamBySlug'
type MockDatabase_GetActiveTeamBySlug_Call struct {
	*mock.Call
}

// GetActiveTeamBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 slug.Slug
func (_e *MockDatabase_Expecter) GetActiveTeamBySlug(ctx interface{}, _a1 interface{}) *MockDatabase_GetActiveTeamBySlug_Call {
	return &MockDatabase_GetActiveTeamBySlug_Call{Call: _e.mock.On("GetActiveTeamBySlug", ctx, _a1)}
}

func (_c *MockDatabase_GetActiveTeamBySlug_Call) Run(run func(ctx context.Context, _a1 slug.Slug)) *MockDatabase_GetActiveTeamBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetActiveTeamBySlug_Call) Return(_a0 *Team, _a1 error) *MockDatabase_GetActiveTeamBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetActiveTeamBySlug_Call) RunAndReturn(run func(context.Context, slug.Slug) (*Team, error)) *MockDatabase_GetActiveTeamBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveTeams provides a mock function with given fields: ctx
func (_m *MockDatabase) GetActiveTeams(ctx context.Context) ([]*Team, error) {
	ret := _m.Called(ctx)

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Team, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetActiveTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveTeams'
type MockDatabase_GetActiveTeams_Call struct {
	*mock.Call
}

// GetActiveTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetActiveTeams(ctx interface{}) *MockDatabase_GetActiveTeams_Call {
	return &MockDatabase_GetActiveTeams_Call{Call: _e.mock.On("GetActiveTeams", ctx)}
}

func (_c *MockDatabase_GetActiveTeams_Call) Run(run func(ctx context.Context)) *MockDatabase_GetActiveTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetActiveTeams_Call) Return(_a0 []*Team, _a1 error) *MockDatabase_GetActiveTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetActiveTeams_Call) RunAndReturn(run func(context.Context) ([]*Team, error)) *MockDatabase_GetActiveTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUserRoles provides a mock function with given fields: ctx
func (_m *MockDatabase) GetAllUserRoles(ctx context.Context) ([]*UserRole, error) {
	ret := _m.Called(ctx)

	var r0 []*UserRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*UserRole, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*UserRole); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAllUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUserRoles'
type MockDatabase_GetAllUserRoles_Call struct {
	*mock.Call
}

// GetAllUserRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetAllUserRoles(ctx interface{}) *MockDatabase_GetAllUserRoles_Call {
	return &MockDatabase_GetAllUserRoles_Call{Call: _e.mock.On("GetAllUserRoles", ctx)}
}

func (_c *MockDatabase_GetAllUserRoles_Call) Run(run func(ctx context.Context)) *MockDatabase_GetAllUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetAllUserRoles_Call) Return(_a0 []*UserRole, _a1 error) *MockDatabase_GetAllUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAllUserRoles_Call) RunAndReturn(run func(context.Context) ([]*UserRole, error)) *MockDatabase_GetAllUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsForCorrelationID provides a mock function with given fields: ctx, correlationID
func (_m *MockDatabase) GetAuditLogsForCorrelationID(ctx context.Context, correlationID uuid.UUID) ([]*AuditLog, error) {
	ret := _m.Called(ctx, correlationID)

	var r0 []*AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*AuditLog, error)); ok {
		return rf(ctx, correlationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*AuditLog); ok {
		r0 = rf(ctx, correlationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, correlationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAuditLogsForCorrelationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsForCorrelationID'
type MockDatabase_GetAuditLogsForCorrelationID_Call struct {
	*mock.Call
}

// GetAuditLogsForCorrelationID is a helper method to define mock.On call
//   - ctx context.Context
//   - correlationID uuid.UUID
func (_e *MockDatabase_Expecter) GetAuditLogsForCorrelationID(ctx interface{}, correlationID interface{}) *MockDatabase_GetAuditLogsForCorrelationID_Call {
	return &MockDatabase_GetAuditLogsForCorrelationID_Call{Call: _e.mock.On("GetAuditLogsForCorrelationID", ctx, correlationID)}
}

func (_c *MockDatabase_GetAuditLogsForCorrelationID_Call) Run(run func(ctx context.Context, correlationID uuid.UUID)) *MockDatabase_GetAuditLogsForCorrelationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetAuditLogsForCorrelationID_Call) Return(_a0 []*AuditLog, _a1 error) *MockDatabase_GetAuditLogsForCorrelationID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAuditLogsForCorrelationID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*AuditLog, error)) *MockDatabase_GetAuditLogsForCorrelationID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsForReconciler provides a mock function with given fields: ctx, reconcilerName
func (_m *MockDatabase) GetAuditLogsForReconciler(ctx context.Context, reconcilerName sqlc.ReconcilerName) ([]*AuditLog, error) {
	ret := _m.Called(ctx, reconcilerName)

	var r0 []*AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) ([]*AuditLog, error)); ok {
		return rf(ctx, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) []*AuditLog); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ReconcilerName) error); ok {
		r1 = rf(ctx, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAuditLogsForReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsForReconciler'
type MockDatabase_GetAuditLogsForReconciler_Call struct {
	*mock.Call
}

// GetAuditLogsForReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) GetAuditLogsForReconciler(ctx interface{}, reconcilerName interface{}) *MockDatabase_GetAuditLogsForReconciler_Call {
	return &MockDatabase_GetAuditLogsForReconciler_Call{Call: _e.mock.On("GetAuditLogsForReconciler", ctx, reconcilerName)}
}

func (_c *MockDatabase_GetAuditLogsForReconciler_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName)) *MockDatabase_GetAuditLogsForReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_GetAuditLogsForReconciler_Call) Return(_a0 []*AuditLog, _a1 error) *MockDatabase_GetAuditLogsForReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAuditLogsForReconciler_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName) ([]*AuditLog, error)) *MockDatabase_GetAuditLogsForReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditLogsForTeam provides a mock function with given fields: ctx, _a1
func (_m *MockDatabase) GetAuditLogsForTeam(ctx context.Context, _a1 slug.Slug) ([]*AuditLog, error) {
	ret := _m.Called(ctx, _a1)

	var r0 []*AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) ([]*AuditLog, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) []*AuditLog); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetAuditLogsForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogsForTeam'
type MockDatabase_GetAuditLogsForTeam_Call struct {
	*mock.Call
}

// GetAuditLogsForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 slug.Slug
func (_e *MockDatabase_Expecter) GetAuditLogsForTeam(ctx interface{}, _a1 interface{}) *MockDatabase_GetAuditLogsForTeam_Call {
	return &MockDatabase_GetAuditLogsForTeam_Call{Call: _e.mock.On("GetAuditLogsForTeam", ctx, _a1)}
}

func (_c *MockDatabase_GetAuditLogsForTeam_Call) Run(run func(ctx context.Context, _a1 slug.Slug)) *MockDatabase_GetAuditLogsForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetAuditLogsForTeam_Call) Return(_a0 []*AuditLog, _a1 error) *MockDatabase_GetAuditLogsForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetAuditLogsForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) ([]*AuditLog, error)) *MockDatabase_GetAuditLogsForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnabledReconcilers provides a mock function with given fields: ctx
func (_m *MockDatabase) GetEnabledReconcilers(ctx context.Context) ([]*Reconciler, error) {
	ret := _m.Called(ctx)

	var r0 []*Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Reconciler, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Reconciler); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetEnabledReconcilers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnabledReconcilers'
type MockDatabase_GetEnabledReconcilers_Call struct {
	*mock.Call
}

// GetEnabledReconcilers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetEnabledReconcilers(ctx interface{}) *MockDatabase_GetEnabledReconcilers_Call {
	return &MockDatabase_GetEnabledReconcilers_Call{Call: _e.mock.On("GetEnabledReconcilers", ctx)}
}

func (_c *MockDatabase_GetEnabledReconcilers_Call) Run(run func(ctx context.Context)) *MockDatabase_GetEnabledReconcilers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetEnabledReconcilers_Call) Return(_a0 []*Reconciler, _a1 error) *MockDatabase_GetEnabledReconcilers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetEnabledReconcilers_Call) RunAndReturn(run func(context.Context) ([]*Reconciler, error)) *MockDatabase_GetEnabledReconcilers_Call {
	_c.Call.Return(run)
	return _c
}

// GetReconciler provides a mock function with given fields: ctx, reconcilerName
func (_m *MockDatabase) GetReconciler(ctx context.Context, reconcilerName sqlc.ReconcilerName) (*Reconciler, error) {
	ret := _m.Called(ctx, reconcilerName)

	var r0 *Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) (*Reconciler, error)); ok {
		return rf(ctx, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) *Reconciler); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ReconcilerName) error); ok {
		r1 = rf(ctx, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReconciler'
type MockDatabase_GetReconciler_Call struct {
	*mock.Call
}

// GetReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) GetReconciler(ctx interface{}, reconcilerName interface{}) *MockDatabase_GetReconciler_Call {
	return &MockDatabase_GetReconciler_Call{Call: _e.mock.On("GetReconciler", ctx, reconcilerName)}
}

func (_c *MockDatabase_GetReconciler_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName)) *MockDatabase_GetReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_GetReconciler_Call) Return(_a0 *Reconciler, _a1 error) *MockDatabase_GetReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetReconciler_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName) (*Reconciler, error)) *MockDatabase_GetReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// GetReconcilerConfig provides a mock function with given fields: ctx, reconcilerName
func (_m *MockDatabase) GetReconcilerConfig(ctx context.Context, reconcilerName sqlc.ReconcilerName) ([]*ReconcilerConfig, error) {
	ret := _m.Called(ctx, reconcilerName)

	var r0 []*ReconcilerConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) ([]*ReconcilerConfig, error)); ok {
		return rf(ctx, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) []*ReconcilerConfig); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ReconcilerConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ReconcilerName) error); ok {
		r1 = rf(ctx, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetReconcilerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReconcilerConfig'
type MockDatabase_GetReconcilerConfig_Call struct {
	*mock.Call
}

// GetReconcilerConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) GetReconcilerConfig(ctx interface{}, reconcilerName interface{}) *MockDatabase_GetReconcilerConfig_Call {
	return &MockDatabase_GetReconcilerConfig_Call{Call: _e.mock.On("GetReconcilerConfig", ctx, reconcilerName)}
}

func (_c *MockDatabase_GetReconcilerConfig_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName)) *MockDatabase_GetReconcilerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_GetReconcilerConfig_Call) Return(_a0 []*ReconcilerConfig, _a1 error) *MockDatabase_GetReconcilerConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetReconcilerConfig_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName) ([]*ReconcilerConfig, error)) *MockDatabase_GetReconcilerConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetReconcilers provides a mock function with given fields: ctx
func (_m *MockDatabase) GetReconcilers(ctx context.Context) ([]*Reconciler, error) {
	ret := _m.Called(ctx)

	var r0 []*Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Reconciler, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Reconciler); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetReconcilers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReconcilers'
type MockDatabase_GetReconcilers_Call struct {
	*mock.Call
}

// GetReconcilers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetReconcilers(ctx interface{}) *MockDatabase_GetReconcilers_Call {
	return &MockDatabase_GetReconcilers_Call{Call: _e.mock.On("GetReconcilers", ctx)}
}

func (_c *MockDatabase_GetReconcilers_Call) Run(run func(ctx context.Context)) *MockDatabase_GetReconcilers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetReconcilers_Call) Return(_a0 []*Reconciler, _a1 error) *MockDatabase_GetReconcilers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetReconcilers_Call) RunAndReturn(run func(context.Context) ([]*Reconciler, error)) *MockDatabase_GetReconcilers_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoryAuthorizations provides a mock function with given fields: ctx, teamSlug, repo
func (_m *MockDatabase) GetRepositoryAuthorizations(ctx context.Context, teamSlug slug.Slug, repo string) ([]sqlc.RepositoryAuthorizationEnum, error) {
	ret := _m.Called(ctx, teamSlug, repo)

	var r0 []sqlc.RepositoryAuthorizationEnum
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string) ([]sqlc.RepositoryAuthorizationEnum, error)); ok {
		return rf(ctx, teamSlug, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string) []sqlc.RepositoryAuthorizationEnum); ok {
		r0 = rf(ctx, teamSlug, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.RepositoryAuthorizationEnum)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, string) error); ok {
		r1 = rf(ctx, teamSlug, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetRepositoryAuthorizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoryAuthorizations'
type MockDatabase_GetRepositoryAuthorizations_Call struct {
	*mock.Call
}

// GetRepositoryAuthorizations is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - repo string
func (_e *MockDatabase_Expecter) GetRepositoryAuthorizations(ctx interface{}, teamSlug interface{}, repo interface{}) *MockDatabase_GetRepositoryAuthorizations_Call {
	return &MockDatabase_GetRepositoryAuthorizations_Call{Call: _e.mock.On("GetRepositoryAuthorizations", ctx, teamSlug, repo)}
}

func (_c *MockDatabase_GetRepositoryAuthorizations_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, repo string)) *MockDatabase_GetRepositoryAuthorizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string))
	})
	return _c
}

func (_c *MockDatabase_GetRepositoryAuthorizations_Call) Return(_a0 []sqlc.RepositoryAuthorizationEnum, _a1 error) *MockDatabase_GetRepositoryAuthorizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetRepositoryAuthorizations_Call) RunAndReturn(run func(context.Context, slug.Slug, string) ([]sqlc.RepositoryAuthorizationEnum, error)) *MockDatabase_GetRepositoryAuthorizations_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountByApiKey provides a mock function with given fields: ctx, APIKey
func (_m *MockDatabase) GetServiceAccountByApiKey(ctx context.Context, APIKey string) (*ServiceAccount, error) {
	ret := _m.Called(ctx, APIKey)

	var r0 *ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ServiceAccount, error)); ok {
		return rf(ctx, APIKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceAccount); ok {
		r0 = rf(ctx, APIKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, APIKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceAccountByApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountByApiKey'
type MockDatabase_GetServiceAccountByApiKey_Call struct {
	*mock.Call
}

// GetServiceAccountByApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - APIKey string
func (_e *MockDatabase_Expecter) GetServiceAccountByApiKey(ctx interface{}, APIKey interface{}) *MockDatabase_GetServiceAccountByApiKey_Call {
	return &MockDatabase_GetServiceAccountByApiKey_Call{Call: _e.mock.On("GetServiceAccountByApiKey", ctx, APIKey)}
}

func (_c *MockDatabase_GetServiceAccountByApiKey_Call) Run(run func(ctx context.Context, APIKey string)) *MockDatabase_GetServiceAccountByApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GetServiceAccountByApiKey_Call) Return(_a0 *ServiceAccount, _a1 error) *MockDatabase_GetServiceAccountByApiKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceAccountByApiKey_Call) RunAndReturn(run func(context.Context, string) (*ServiceAccount, error)) *MockDatabase_GetServiceAccountByApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountByName provides a mock function with given fields: ctx, name
func (_m *MockDatabase) GetServiceAccountByName(ctx context.Context, name string) (*ServiceAccount, error) {
	ret := _m.Called(ctx, name)

	var r0 *ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ServiceAccount, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ServiceAccount); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceAccountByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountByName'
type MockDatabase_GetServiceAccountByName_Call struct {
	*mock.Call
}

// GetServiceAccountByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockDatabase_Expecter) GetServiceAccountByName(ctx interface{}, name interface{}) *MockDatabase_GetServiceAccountByName_Call {
	return &MockDatabase_GetServiceAccountByName_Call{Call: _e.mock.On("GetServiceAccountByName", ctx, name)}
}

func (_c *MockDatabase_GetServiceAccountByName_Call) Run(run func(ctx context.Context, name string)) *MockDatabase_GetServiceAccountByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GetServiceAccountByName_Call) Return(_a0 *ServiceAccount, _a1 error) *MockDatabase_GetServiceAccountByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceAccountByName_Call) RunAndReturn(run func(context.Context, string) (*ServiceAccount, error)) *MockDatabase_GetServiceAccountByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountRoles provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockDatabase) GetServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) ([]*Role, error) {
	ret := _m.Called(ctx, serviceAccountID)

	var r0 []*Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*Role, error)); ok {
		return rf(ctx, serviceAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*Role); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceAccountRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountRoles'
type MockDatabase_GetServiceAccountRoles_Call struct {
	*mock.Call
}

// GetServiceAccountRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) GetServiceAccountRoles(ctx interface{}, serviceAccountID interface{}) *MockDatabase_GetServiceAccountRoles_Call {
	return &MockDatabase_GetServiceAccountRoles_Call{Call: _e.mock.On("GetServiceAccountRoles", ctx, serviceAccountID)}
}

func (_c *MockDatabase_GetServiceAccountRoles_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockDatabase_GetServiceAccountRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetServiceAccountRoles_Call) Return(_a0 []*Role, _a1 error) *MockDatabase_GetServiceAccountRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceAccountRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*Role, error)) *MockDatabase_GetServiceAccountRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccounts provides a mock function with given fields: ctx
func (_m *MockDatabase) GetServiceAccounts(ctx context.Context) ([]*ServiceAccount, error) {
	ret := _m.Called(ctx)

	var r0 []*ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ServiceAccount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ServiceAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccounts'
type MockDatabase_GetServiceAccounts_Call struct {
	*mock.Call
}

// GetServiceAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetServiceAccounts(ctx interface{}) *MockDatabase_GetServiceAccounts_Call {
	return &MockDatabase_GetServiceAccounts_Call{Call: _e.mock.On("GetServiceAccounts", ctx)}
}

func (_c *MockDatabase_GetServiceAccounts_Call) Run(run func(ctx context.Context)) *MockDatabase_GetServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetServiceAccounts_Call) Return(_a0 []*ServiceAccount, _a1 error) *MockDatabase_GetServiceAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetServiceAccounts_Call) RunAndReturn(run func(context.Context) ([]*ServiceAccount, error)) *MockDatabase_GetServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByID provides a mock function with given fields: ctx, sessionID
func (_m *MockDatabase) GetSessionByID(ctx context.Context, sessionID uuid.UUID) (*Session, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 *Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByID'
type MockDatabase_GetSessionByID_Call struct {
	*mock.Call
}

// GetSessionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
func (_e *MockDatabase_Expecter) GetSessionByID(ctx interface{}, sessionID interface{}) *MockDatabase_GetSessionByID_Call {
	return &MockDatabase_GetSessionByID_Call{Call: _e.mock.On("GetSessionByID", ctx, sessionID)}
}

func (_c *MockDatabase_GetSessionByID_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *MockDatabase_GetSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetSessionByID_Call) Return(_a0 *Session, _a1 error) *MockDatabase_GetSessionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetSessionByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Session, error)) *MockDatabase_GetSessionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlackAlertsChannels provides a mock function with given fields: ctx, teamSlug
func (_m *MockDatabase) GetSlackAlertsChannels(ctx context.Context, teamSlug slug.Slug) (map[string]string, error) {
	ret := _m.Called(ctx, teamSlug)

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (map[string]string, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) map[string]string); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetSlackAlertsChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlackAlertsChannels'
type MockDatabase_GetSlackAlertsChannels_Call struct {
	*mock.Call
}

// GetSlackAlertsChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) GetSlackAlertsChannels(ctx interface{}, teamSlug interface{}) *MockDatabase_GetSlackAlertsChannels_Call {
	return &MockDatabase_GetSlackAlertsChannels_Call{Call: _e.mock.On("GetSlackAlertsChannels", ctx, teamSlug)}
}

func (_c *MockDatabase_GetSlackAlertsChannels_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockDatabase_GetSlackAlertsChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetSlackAlertsChannels_Call) Return(_a0 map[string]string, _a1 error) *MockDatabase_GetSlackAlertsChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetSlackAlertsChannels_Call) RunAndReturn(run func(context.Context, slug.Slug) (map[string]string, error)) *MockDatabase_GetSlackAlertsChannels_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamBySlug provides a mock function with given fields: ctx, _a1
func (_m *MockDatabase) GetTeamBySlug(ctx context.Context, _a1 slug.Slug) (*Team, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) (*Team, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) *Team); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamBySlug'
type MockDatabase_GetTeamBySlug_Call struct {
	*mock.Call
}

// GetTeamBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 slug.Slug
func (_e *MockDatabase_Expecter) GetTeamBySlug(ctx interface{}, _a1 interface{}) *MockDatabase_GetTeamBySlug_Call {
	return &MockDatabase_GetTeamBySlug_Call{Call: _e.mock.On("GetTeamBySlug", ctx, _a1)}
}

func (_c *MockDatabase_GetTeamBySlug_Call) Run(run func(ctx context.Context, _a1 slug.Slug)) *MockDatabase_GetTeamBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetTeamBySlug_Call) Return(_a0 *Team, _a1 error) *MockDatabase_GetTeamBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamBySlug_Call) RunAndReturn(run func(context.Context, slug.Slug) (*Team, error)) *MockDatabase_GetTeamBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamDeleteKey provides a mock function with given fields: ctx, key
func (_m *MockDatabase) GetTeamDeleteKey(ctx context.Context, key uuid.UUID) (*TeamDeleteKey, error) {
	ret := _m.Called(ctx, key)

	var r0 *TeamDeleteKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*TeamDeleteKey, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *TeamDeleteKey); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeamDeleteKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamDeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamDeleteKey'
type MockDatabase_GetTeamDeleteKey_Call struct {
	*mock.Call
}

// GetTeamDeleteKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key uuid.UUID
func (_e *MockDatabase_Expecter) GetTeamDeleteKey(ctx interface{}, key interface{}) *MockDatabase_GetTeamDeleteKey_Call {
	return &MockDatabase_GetTeamDeleteKey_Call{Call: _e.mock.On("GetTeamDeleteKey", ctx, key)}
}

func (_c *MockDatabase_GetTeamDeleteKey_Call) Run(run func(ctx context.Context, key uuid.UUID)) *MockDatabase_GetTeamDeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetTeamDeleteKey_Call) Return(_a0 *TeamDeleteKey, _a1 error) *MockDatabase_GetTeamDeleteKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamDeleteKey_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*TeamDeleteKey, error)) *MockDatabase_GetTeamDeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMember provides a mock function with given fields: ctx, teamSlug, userID
func (_m *MockDatabase) GetTeamMember(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID) (*User, error) {
	ret := _m.Called(ctx, teamSlug, userID)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID) (*User, error)); ok {
		return rf(ctx, teamSlug, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, uuid.UUID) *User); ok {
		r0 = rf(ctx, teamSlug, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, uuid.UUID) error); ok {
		r1 = rf(ctx, teamSlug, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMember'
type MockDatabase_GetTeamMember_Call struct {
	*mock.Call
}

// GetTeamMember is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) GetTeamMember(ctx interface{}, teamSlug interface{}, userID interface{}) *MockDatabase_GetTeamMember_Call {
	return &MockDatabase_GetTeamMember_Call{Call: _e.mock.On("GetTeamMember", ctx, teamSlug, userID)}
}

func (_c *MockDatabase_GetTeamMember_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, userID uuid.UUID)) *MockDatabase_GetTeamMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetTeamMember_Call) Return(_a0 *User, _a1 error) *MockDatabase_GetTeamMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamMember_Call) RunAndReturn(run func(context.Context, slug.Slug, uuid.UUID) (*User, error)) *MockDatabase_GetTeamMember_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMemberOptOuts provides a mock function with given fields: ctx, userID, teamSlug
func (_m *MockDatabase) GetTeamMemberOptOuts(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug) ([]*sqlc.GetTeamMemberOptOutsRow, error) {
	ret := _m.Called(ctx, userID, teamSlug)

	var r0 []*sqlc.GetTeamMemberOptOutsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug) ([]*sqlc.GetTeamMemberOptOutsRow, error)); ok {
		return rf(ctx, userID, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug) []*sqlc.GetTeamMemberOptOutsRow); ok {
		r0 = rf(ctx, userID, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sqlc.GetTeamMemberOptOutsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, slug.Slug) error); ok {
		r1 = rf(ctx, userID, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamMemberOptOuts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMemberOptOuts'
type MockDatabase_GetTeamMemberOptOuts_Call struct {
	*mock.Call
}

// GetTeamMemberOptOuts is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) GetTeamMemberOptOuts(ctx interface{}, userID interface{}, teamSlug interface{}) *MockDatabase_GetTeamMemberOptOuts_Call {
	return &MockDatabase_GetTeamMemberOptOuts_Call{Call: _e.mock.On("GetTeamMemberOptOuts", ctx, userID, teamSlug)}
}

func (_c *MockDatabase_GetTeamMemberOptOuts_Call) Run(run func(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug)) *MockDatabase_GetTeamMemberOptOuts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetTeamMemberOptOuts_Call) Return(_a0 []*sqlc.GetTeamMemberOptOutsRow, _a1 error) *MockDatabase_GetTeamMemberOptOuts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamMemberOptOuts_Call) RunAndReturn(run func(context.Context, uuid.UUID, slug.Slug) ([]*sqlc.GetTeamMemberOptOutsRow, error)) *MockDatabase_GetTeamMemberOptOuts_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembers provides a mock function with given fields: ctx, teamSlug
func (_m *MockDatabase) GetTeamMembers(ctx context.Context, teamSlug slug.Slug) ([]*User, error) {
	ret := _m.Called(ctx, teamSlug)

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) ([]*User, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) []*User); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembers'
type MockDatabase_GetTeamMembers_Call struct {
	*mock.Call
}

// GetTeamMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) GetTeamMembers(ctx interface{}, teamSlug interface{}) *MockDatabase_GetTeamMembers_Call {
	return &MockDatabase_GetTeamMembers_Call{Call: _e.mock.On("GetTeamMembers", ctx, teamSlug)}
}

func (_c *MockDatabase_GetTeamMembers_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockDatabase_GetTeamMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetTeamMembers_Call) Return(_a0 []*User, _a1 error) *MockDatabase_GetTeamMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamMembers_Call) RunAndReturn(run func(context.Context, slug.Slug) ([]*User, error)) *MockDatabase_GetTeamMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembersForReconciler provides a mock function with given fields: ctx, teamSlug, reconcilerName
func (_m *MockDatabase) GetTeamMembersForReconciler(ctx context.Context, teamSlug slug.Slug, reconcilerName sqlc.ReconcilerName) ([]*User, error) {
	ret := _m.Called(ctx, teamSlug, reconcilerName)

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, sqlc.ReconcilerName) ([]*User, error)); ok {
		return rf(ctx, teamSlug, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, sqlc.ReconcilerName) []*User); ok {
		r0 = rf(ctx, teamSlug, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, sqlc.ReconcilerName) error); ok {
		r1 = rf(ctx, teamSlug, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamMembersForReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembersForReconciler'
type MockDatabase_GetTeamMembersForReconciler_Call struct {
	*mock.Call
}

// GetTeamMembersForReconciler is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) GetTeamMembersForReconciler(ctx interface{}, teamSlug interface{}, reconcilerName interface{}) *MockDatabase_GetTeamMembersForReconciler_Call {
	return &MockDatabase_GetTeamMembersForReconciler_Call{Call: _e.mock.On("GetTeamMembersForReconciler", ctx, teamSlug, reconcilerName)}
}

func (_c *MockDatabase_GetTeamMembersForReconciler_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, reconcilerName sqlc.ReconcilerName)) *MockDatabase_GetTeamMembersForReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_GetTeamMembersForReconciler_Call) Return(_a0 []*User, _a1 error) *MockDatabase_GetTeamMembersForReconciler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamMembersForReconciler_Call) RunAndReturn(run func(context.Context, slug.Slug, sqlc.ReconcilerName) ([]*User, error)) *MockDatabase_GetTeamMembersForReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamReconcilerErrors provides a mock function with given fields: ctx, _a1
func (_m *MockDatabase) GetTeamReconcilerErrors(ctx context.Context, _a1 slug.Slug) ([]*ReconcilerError, error) {
	ret := _m.Called(ctx, _a1)

	var r0 []*ReconcilerError
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) ([]*ReconcilerError, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) []*ReconcilerError); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ReconcilerError)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamReconcilerErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamReconcilerErrors'
type MockDatabase_GetTeamReconcilerErrors_Call struct {
	*mock.Call
}

// GetTeamReconcilerErrors is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 slug.Slug
func (_e *MockDatabase_Expecter) GetTeamReconcilerErrors(ctx interface{}, _a1 interface{}) *MockDatabase_GetTeamReconcilerErrors_Call {
	return &MockDatabase_GetTeamReconcilerErrors_Call{Call: _e.mock.On("GetTeamReconcilerErrors", ctx, _a1)}
}

func (_c *MockDatabase_GetTeamReconcilerErrors_Call) Run(run func(ctx context.Context, _a1 slug.Slug)) *MockDatabase_GetTeamReconcilerErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_GetTeamReconcilerErrors_Call) Return(_a0 []*ReconcilerError, _a1 error) *MockDatabase_GetTeamReconcilerErrors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamReconcilerErrors_Call) RunAndReturn(run func(context.Context, slug.Slug) ([]*ReconcilerError, error)) *MockDatabase_GetTeamReconcilerErrors_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx
func (_m *MockDatabase) GetTeams(ctx context.Context) ([]*Team, error) {
	ret := _m.Called(ctx)

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Team, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockDatabase_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetTeams(ctx interface{}) *MockDatabase_GetTeams_Call {
	return &MockDatabase_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx)}
}

func (_c *MockDatabase_GetTeams_Call) Run(run func(ctx context.Context)) *MockDatabase_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetTeams_Call) Return(_a0 []*Team, _a1 error) *MockDatabase_GetTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeams_Call) RunAndReturn(run func(context.Context) ([]*Team, error)) *MockDatabase_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsWithPermissionInGitHubRepo provides a mock function with given fields: ctx, repoName, permission
func (_m *MockDatabase) GetTeamsWithPermissionInGitHubRepo(ctx context.Context, repoName string, permission string) ([]*Team, error) {
	ret := _m.Called(ctx, repoName, permission)

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*Team, error)); ok {
		return rf(ctx, repoName, permission)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*Team); ok {
		r0 = rf(ctx, repoName, permission)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, repoName, permission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsWithPermissionInGitHubRepo'
type MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call struct {
	*mock.Call
}

// GetTeamsWithPermissionInGitHubRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - repoName string
//   - permission string
func (_e *MockDatabase_Expecter) GetTeamsWithPermissionInGitHubRepo(ctx interface{}, repoName interface{}, permission interface{}) *MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call {
	return &MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call{Call: _e.mock.On("GetTeamsWithPermissionInGitHubRepo", ctx, repoName, permission)}
}

func (_c *MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call) Run(run func(ctx context.Context, repoName string, permission string)) *MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call) Return(_a0 []*Team, _a1 error) *MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call) RunAndReturn(run func(context.Context, string, string) ([]*Team, error)) *MockDatabase_GetTeamsWithPermissionInGitHubRepo_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockDatabase) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	ret := _m.Called(ctx, email)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockDatabase_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockDatabase_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockDatabase_GetUserByEmail_Call {
	return &MockDatabase_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockDatabase_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockDatabase_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GetUserByEmail_Call) Return(_a0 *User, _a1 error) *MockDatabase_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockDatabase_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByExternalID provides a mock function with given fields: ctx, externalID
func (_m *MockDatabase) GetUserByExternalID(ctx context.Context, externalID string) (*User, error) {
	ret := _m.Called(ctx, externalID)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByExternalID'
type MockDatabase_GetUserByExternalID_Call struct {
	*mock.Call
}

// GetUserByExternalID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID string
func (_e *MockDatabase_Expecter) GetUserByExternalID(ctx interface{}, externalID interface{}) *MockDatabase_GetUserByExternalID_Call {
	return &MockDatabase_GetUserByExternalID_Call{Call: _e.mock.On("GetUserByExternalID", ctx, externalID)}
}

func (_c *MockDatabase_GetUserByExternalID_Call) Run(run func(ctx context.Context, externalID string)) *MockDatabase_GetUserByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDatabase_GetUserByExternalID_Call) Return(_a0 *User, _a1 error) *MockDatabase_GetUserByExternalID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserByExternalID_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockDatabase_GetUserByExternalID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, ID
func (_m *MockDatabase) GetUserByID(ctx context.Context, ID uuid.UUID) (*User, error) {
	ret := _m.Called(ctx, ID)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *User); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockDatabase_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *MockDatabase_Expecter) GetUserByID(ctx interface{}, ID interface{}) *MockDatabase_GetUserByID_Call {
	return &MockDatabase_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, ID)}
}

func (_c *MockDatabase_GetUserByID_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *MockDatabase_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetUserByID_Call) Return(_a0 *User, _a1 error) *MockDatabase_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*User, error)) *MockDatabase_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx, userID
func (_m *MockDatabase) GetUserRoles(ctx context.Context, userID uuid.UUID) ([]*Role, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*Role, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type MockDatabase_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) GetUserRoles(ctx interface{}, userID interface{}) *MockDatabase_GetUserRoles_Call {
	return &MockDatabase_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx, userID)}
}

func (_c *MockDatabase_GetUserRoles_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDatabase_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetUserRoles_Call) Return(_a0 []*Role, _a1 error) *MockDatabase_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*Role, error)) *MockDatabase_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTeams provides a mock function with given fields: ctx, userID
func (_m *MockDatabase) GetUserTeams(ctx context.Context, userID uuid.UUID) ([]*Team, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*Team, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*Team); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUserTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTeams'
type MockDatabase_GetUserTeams_Call struct {
	*mock.Call
}

// GetUserTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockDatabase_Expecter) GetUserTeams(ctx interface{}, userID interface{}) *MockDatabase_GetUserTeams_Call {
	return &MockDatabase_GetUserTeams_Call{Call: _e.mock.On("GetUserTeams", ctx, userID)}
}

func (_c *MockDatabase_GetUserTeams_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockDatabase_GetUserTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_GetUserTeams_Call) Return(_a0 []*Team, _a1 error) *MockDatabase_GetUserTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUserTeams_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*Team, error)) *MockDatabase_GetUserTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx
func (_m *MockDatabase) GetUsers(ctx context.Context) ([]*User, error) {
	ret := _m.Called(ctx)

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockDatabase_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) GetUsers(ctx interface{}) *MockDatabase_GetUsers_Call {
	return &MockDatabase_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx)}
}

func (_c *MockDatabase_GetUsers_Call) Run(run func(ctx context.Context)) *MockDatabase_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_GetUsers_Call) Return(_a0 []*User, _a1 error) *MockDatabase_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUsers_Call) RunAndReturn(run func(context.Context) ([]*User, error)) *MockDatabase_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersWithGloballyAssignedRole provides a mock function with given fields: ctx, roleName
func (_m *MockDatabase) GetUsersWithGloballyAssignedRole(ctx context.Context, roleName sqlc.RoleName) ([]*User, error) {
	ret := _m.Called(ctx, roleName)

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.RoleName) ([]*User, error)); ok {
		return rf(ctx, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.RoleName) []*User); ok {
		r0 = rf(ctx, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.RoleName) error); ok {
		r1 = rf(ctx, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_GetUsersWithGloballyAssignedRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersWithGloballyAssignedRole'
type MockDatabase_GetUsersWithGloballyAssignedRole_Call struct {
	*mock.Call
}

// GetUsersWithGloballyAssignedRole is a helper method to define mock.On call
//   - ctx context.Context
//   - roleName sqlc.RoleName
func (_e *MockDatabase_Expecter) GetUsersWithGloballyAssignedRole(ctx interface{}, roleName interface{}) *MockDatabase_GetUsersWithGloballyAssignedRole_Call {
	return &MockDatabase_GetUsersWithGloballyAssignedRole_Call{Call: _e.mock.On("GetUsersWithGloballyAssignedRole", ctx, roleName)}
}

func (_c *MockDatabase_GetUsersWithGloballyAssignedRole_Call) Run(run func(ctx context.Context, roleName sqlc.RoleName)) *MockDatabase_GetUsersWithGloballyAssignedRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.RoleName))
	})
	return _c
}

func (_c *MockDatabase_GetUsersWithGloballyAssignedRole_Call) Return(_a0 []*User, _a1 error) *MockDatabase_GetUsersWithGloballyAssignedRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_GetUsersWithGloballyAssignedRole_Call) RunAndReturn(run func(context.Context, sqlc.RoleName) ([]*User, error)) *MockDatabase_GetUsersWithGloballyAssignedRole_Call {
	_c.Call.Return(run)
	return _c
}

// IsFirstRun provides a mock function with given fields: ctx
func (_m *MockDatabase) IsFirstRun(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_IsFirstRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFirstRun'
type MockDatabase_IsFirstRun_Call struct {
	*mock.Call
}

// IsFirstRun is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) IsFirstRun(ctx interface{}) *MockDatabase_IsFirstRun_Call {
	return &MockDatabase_IsFirstRun_Call{Call: _e.mock.On("IsFirstRun", ctx)}
}

func (_c *MockDatabase_IsFirstRun_Call) Run(run func(ctx context.Context)) *MockDatabase_IsFirstRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDatabase_IsFirstRun_Call) Return(_a0 bool, _a1 error) *MockDatabase_IsFirstRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_IsFirstRun_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockDatabase_IsFirstRun_Call {
	_c.Call.Return(run)
	return _c
}

// LoadReconcilerStateForTeam provides a mock function with given fields: ctx, reconcilerName, _a2, state
func (_m *MockDatabase) LoadReconcilerStateForTeam(ctx context.Context, reconcilerName sqlc.ReconcilerName, _a2 slug.Slug, state interface{}) error {
	ret := _m.Called(ctx, reconcilerName, _a2, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName, slug.Slug, interface{}) error); ok {
		r0 = rf(ctx, reconcilerName, _a2, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_LoadReconcilerStateForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadReconcilerStateForTeam'
type MockDatabase_LoadReconcilerStateForTeam_Call struct {
	*mock.Call
}

// LoadReconcilerStateForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
//   - _a2 slug.Slug
//   - state interface{}
func (_e *MockDatabase_Expecter) LoadReconcilerStateForTeam(ctx interface{}, reconcilerName interface{}, _a2 interface{}, state interface{}) *MockDatabase_LoadReconcilerStateForTeam_Call {
	return &MockDatabase_LoadReconcilerStateForTeam_Call{Call: _e.mock.On("LoadReconcilerStateForTeam", ctx, reconcilerName, _a2, state)}
}

func (_c *MockDatabase_LoadReconcilerStateForTeam_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName, _a2 slug.Slug, state interface{})) *MockDatabase_LoadReconcilerStateForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName), args[2].(slug.Slug), args[3].(interface{}))
	})
	return _c
}

func (_c *MockDatabase_LoadReconcilerStateForTeam_Call) Return(_a0 error) *MockDatabase_LoadReconcilerStateForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_LoadReconcilerStateForTeam_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName, slug.Slug, interface{}) error) *MockDatabase_LoadReconcilerStateForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllServiceAccountRoles provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockDatabase) RemoveAllServiceAccountRoles(ctx context.Context, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, serviceAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveAllServiceAccountRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllServiceAccountRoles'
type MockDatabase_RemoveAllServiceAccountRoles_Call struct {
	*mock.Call
}

// RemoveAllServiceAccountRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) RemoveAllServiceAccountRoles(ctx interface{}, serviceAccountID interface{}) *MockDatabase_RemoveAllServiceAccountRoles_Call {
	return &MockDatabase_RemoveAllServiceAccountRoles_Call{Call: _e.mock.On("RemoveAllServiceAccountRoles", ctx, serviceAccountID)}
}

func (_c *MockDatabase_RemoveAllServiceAccountRoles_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockDatabase_RemoveAllServiceAccountRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_RemoveAllServiceAccountRoles_Call) Return(_a0 error) *MockDatabase_RemoveAllServiceAccountRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveAllServiceAccountRoles_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_RemoveAllServiceAccountRoles_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveApiKeysFromServiceAccount provides a mock function with given fields: ctx, serviceAccountID
func (_m *MockDatabase) RemoveApiKeysFromServiceAccount(ctx context.Context, serviceAccountID uuid.UUID) error {
	ret := _m.Called(ctx, serviceAccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, serviceAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveApiKeysFromServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveApiKeysFromServiceAccount'
type MockDatabase_RemoveApiKeysFromServiceAccount_Call struct {
	*mock.Call
}

// RemoveApiKeysFromServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceAccountID uuid.UUID
func (_e *MockDatabase_Expecter) RemoveApiKeysFromServiceAccount(ctx interface{}, serviceAccountID interface{}) *MockDatabase_RemoveApiKeysFromServiceAccount_Call {
	return &MockDatabase_RemoveApiKeysFromServiceAccount_Call{Call: _e.mock.On("RemoveApiKeysFromServiceAccount", ctx, serviceAccountID)}
}

func (_c *MockDatabase_RemoveApiKeysFromServiceAccount_Call) Run(run func(ctx context.Context, serviceAccountID uuid.UUID)) *MockDatabase_RemoveApiKeysFromServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockDatabase_RemoveApiKeysFromServiceAccount_Call) Return(_a0 error) *MockDatabase_RemoveApiKeysFromServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveApiKeysFromServiceAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockDatabase_RemoveApiKeysFromServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveReconcilerOptOut provides a mock function with given fields: ctx, userID, teamSlug, reconcilerName
func (_m *MockDatabase) RemoveReconcilerOptOut(ctx context.Context, userID *uuid.UUID, teamSlug *slug.Slug, reconcilerName sqlc.ReconcilerName) error {
	ret := _m.Called(ctx, userID, teamSlug, reconcilerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, *slug.Slug, sqlc.ReconcilerName) error); ok {
		r0 = rf(ctx, userID, teamSlug, reconcilerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveReconcilerOptOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReconcilerOptOut'
type MockDatabase_RemoveReconcilerOptOut_Call struct {
	*mock.Call
}

// RemoveReconcilerOptOut is a helper method to define mock.On call
//   - ctx context.Context
//   - userID *uuid.UUID
//   - teamSlug *slug.Slug
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) RemoveReconcilerOptOut(ctx interface{}, userID interface{}, teamSlug interface{}, reconcilerName interface{}) *MockDatabase_RemoveReconcilerOptOut_Call {
	return &MockDatabase_RemoveReconcilerOptOut_Call{Call: _e.mock.On("RemoveReconcilerOptOut", ctx, userID, teamSlug, reconcilerName)}
}

func (_c *MockDatabase_RemoveReconcilerOptOut_Call) Run(run func(ctx context.Context, userID *uuid.UUID, teamSlug *slug.Slug, reconcilerName sqlc.ReconcilerName)) *MockDatabase_RemoveReconcilerOptOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uuid.UUID), args[2].(*slug.Slug), args[3].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_RemoveReconcilerOptOut_Call) Return(_a0 error) *MockDatabase_RemoveReconcilerOptOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveReconcilerOptOut_Call) RunAndReturn(run func(context.Context, *uuid.UUID, *slug.Slug, sqlc.ReconcilerName) error) *MockDatabase_RemoveReconcilerOptOut_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveReconcilerStateForTeam provides a mock function with given fields: ctx, reconcilerName, _a2
func (_m *MockDatabase) RemoveReconcilerStateForTeam(ctx context.Context, reconcilerName sqlc.ReconcilerName, _a2 slug.Slug) error {
	ret := _m.Called(ctx, reconcilerName, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName, slug.Slug) error); ok {
		r0 = rf(ctx, reconcilerName, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveReconcilerStateForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveReconcilerStateForTeam'
type MockDatabase_RemoveReconcilerStateForTeam_Call struct {
	*mock.Call
}

// RemoveReconcilerStateForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
//   - _a2 slug.Slug
func (_e *MockDatabase_Expecter) RemoveReconcilerStateForTeam(ctx interface{}, reconcilerName interface{}, _a2 interface{}) *MockDatabase_RemoveReconcilerStateForTeam_Call {
	return &MockDatabase_RemoveReconcilerStateForTeam_Call{Call: _e.mock.On("RemoveReconcilerStateForTeam", ctx, reconcilerName, _a2)}
}

func (_c *MockDatabase_RemoveReconcilerStateForTeam_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName, _a2 slug.Slug)) *MockDatabase_RemoveReconcilerStateForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName), args[2].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_RemoveReconcilerStateForTeam_Call) Return(_a0 error) *MockDatabase_RemoveReconcilerStateForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveReconcilerStateForTeam_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName, slug.Slug) error) *MockDatabase_RemoveReconcilerStateForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRepositoryAuthorization provides a mock function with given fields: ctx, teamSlug, repoName, authorization
func (_m *MockDatabase) RemoveRepositoryAuthorization(ctx context.Context, teamSlug slug.Slug, repoName string, authorization sqlc.RepositoryAuthorizationEnum) error {
	ret := _m.Called(ctx, teamSlug, repoName, authorization)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, sqlc.RepositoryAuthorizationEnum) error); ok {
		r0 = rf(ctx, teamSlug, repoName, authorization)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveRepositoryAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRepositoryAuthorization'
type MockDatabase_RemoveRepositoryAuthorization_Call struct {
	*mock.Call
}

// RemoveRepositoryAuthorization is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - repoName string
//   - authorization sqlc.RepositoryAuthorizationEnum
func (_e *MockDatabase_Expecter) RemoveRepositoryAuthorization(ctx interface{}, teamSlug interface{}, repoName interface{}, authorization interface{}) *MockDatabase_RemoveRepositoryAuthorization_Call {
	return &MockDatabase_RemoveRepositoryAuthorization_Call{Call: _e.mock.On("RemoveRepositoryAuthorization", ctx, teamSlug, repoName, authorization)}
}

func (_c *MockDatabase_RemoveRepositoryAuthorization_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, repoName string, authorization sqlc.RepositoryAuthorizationEnum)) *MockDatabase_RemoveRepositoryAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(sqlc.RepositoryAuthorizationEnum))
	})
	return _c
}

func (_c *MockDatabase_RemoveRepositoryAuthorization_Call) Return(_a0 error) *MockDatabase_RemoveRepositoryAuthorization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveRepositoryAuthorization_Call) RunAndReturn(run func(context.Context, slug.Slug, string, sqlc.RepositoryAuthorizationEnum) error) *MockDatabase_RemoveRepositoryAuthorization_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSlackAlertsChannel provides a mock function with given fields: ctx, teamSlug, environment
func (_m *MockDatabase) RemoveSlackAlertsChannel(ctx context.Context, teamSlug slug.Slug, environment string) error {
	ret := _m.Called(ctx, teamSlug, environment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string) error); ok {
		r0 = rf(ctx, teamSlug, environment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveSlackAlertsChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSlackAlertsChannel'
type MockDatabase_RemoveSlackAlertsChannel_Call struct {
	*mock.Call
}

// RemoveSlackAlertsChannel is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - environment string
func (_e *MockDatabase_Expecter) RemoveSlackAlertsChannel(ctx interface{}, teamSlug interface{}, environment interface{}) *MockDatabase_RemoveSlackAlertsChannel_Call {
	return &MockDatabase_RemoveSlackAlertsChannel_Call{Call: _e.mock.On("RemoveSlackAlertsChannel", ctx, teamSlug, environment)}
}

func (_c *MockDatabase_RemoveSlackAlertsChannel_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, environment string)) *MockDatabase_RemoveSlackAlertsChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string))
	})
	return _c
}

func (_c *MockDatabase_RemoveSlackAlertsChannel_Call) Return(_a0 error) *MockDatabase_RemoveSlackAlertsChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveSlackAlertsChannel_Call) RunAndReturn(run func(context.Context, slug.Slug, string) error) *MockDatabase_RemoveSlackAlertsChannel_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromTeam provides a mock function with given fields: ctx, userID, teamSlug
func (_m *MockDatabase) RemoveUserFromTeam(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug) error {
	ret := _m.Called(ctx, userID, teamSlug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug) error); ok {
		r0 = rf(ctx, userID, teamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RemoveUserFromTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromTeam'
type MockDatabase_RemoveUserFromTeam_Call struct {
	*mock.Call
}

// RemoveUserFromTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) RemoveUserFromTeam(ctx interface{}, userID interface{}, teamSlug interface{}) *MockDatabase_RemoveUserFromTeam_Call {
	return &MockDatabase_RemoveUserFromTeam_Call{Call: _e.mock.On("RemoveUserFromTeam", ctx, userID, teamSlug)}
}

func (_c *MockDatabase_RemoveUserFromTeam_Call) Run(run func(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug)) *MockDatabase_RemoveUserFromTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_RemoveUserFromTeam_Call) Return(_a0 error) *MockDatabase_RemoveUserFromTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RemoveUserFromTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, slug.Slug) error) *MockDatabase_RemoveUserFromTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ResetReconcilerConfig provides a mock function with given fields: ctx, reconcilerName
func (_m *MockDatabase) ResetReconcilerConfig(ctx context.Context, reconcilerName sqlc.ReconcilerName) (*Reconciler, error) {
	ret := _m.Called(ctx, reconcilerName)

	var r0 *Reconciler
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) (*Reconciler, error)); ok {
		return rf(ctx, reconcilerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName) *Reconciler); ok {
		r0 = rf(ctx, reconcilerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Reconciler)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.ReconcilerName) error); ok {
		r1 = rf(ctx, reconcilerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_ResetReconcilerConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetReconcilerConfig'
type MockDatabase_ResetReconcilerConfig_Call struct {
	*mock.Call
}

// ResetReconcilerConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
func (_e *MockDatabase_Expecter) ResetReconcilerConfig(ctx interface{}, reconcilerName interface{}) *MockDatabase_ResetReconcilerConfig_Call {
	return &MockDatabase_ResetReconcilerConfig_Call{Call: _e.mock.On("ResetReconcilerConfig", ctx, reconcilerName)}
}

func (_c *MockDatabase_ResetReconcilerConfig_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName)) *MockDatabase_ResetReconcilerConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName))
	})
	return _c
}

func (_c *MockDatabase_ResetReconcilerConfig_Call) Return(_a0 *Reconciler, _a1 error) *MockDatabase_ResetReconcilerConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_ResetReconcilerConfig_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName) (*Reconciler, error)) *MockDatabase_ResetReconcilerConfig_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeGlobalUserRole provides a mock function with given fields: ctx, userID, roleName
func (_m *MockDatabase) RevokeGlobalUserRole(ctx context.Context, userID uuid.UUID, roleName sqlc.RoleName) error {
	ret := _m.Called(ctx, userID, roleName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, sqlc.RoleName) error); ok {
		r0 = rf(ctx, userID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_RevokeGlobalUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeGlobalUserRole'
type MockDatabase_RevokeGlobalUserRole_Call struct {
	*mock.Call
}

// RevokeGlobalUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - roleName sqlc.RoleName
func (_e *MockDatabase_Expecter) RevokeGlobalUserRole(ctx interface{}, userID interface{}, roleName interface{}) *MockDatabase_RevokeGlobalUserRole_Call {
	return &MockDatabase_RevokeGlobalUserRole_Call{Call: _e.mock.On("RevokeGlobalUserRole", ctx, userID, roleName)}
}

func (_c *MockDatabase_RevokeGlobalUserRole_Call) Run(run func(ctx context.Context, userID uuid.UUID, roleName sqlc.RoleName)) *MockDatabase_RevokeGlobalUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(sqlc.RoleName))
	})
	return _c
}

func (_c *MockDatabase_RevokeGlobalUserRole_Call) Return(_a0 error) *MockDatabase_RevokeGlobalUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_RevokeGlobalUserRole_Call) RunAndReturn(run func(context.Context, uuid.UUID, sqlc.RoleName) error) *MockDatabase_RevokeGlobalUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastSuccessfulSyncForTeam provides a mock function with given fields: ctx, teamSlug
func (_m *MockDatabase) SetLastSuccessfulSyncForTeam(ctx context.Context, teamSlug slug.Slug) error {
	ret := _m.Called(ctx, teamSlug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug) error); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_SetLastSuccessfulSyncForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastSuccessfulSyncForTeam'
type MockDatabase_SetLastSuccessfulSyncForTeam_Call struct {
	*mock.Call
}

// SetLastSuccessfulSyncForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) SetLastSuccessfulSyncForTeam(ctx interface{}, teamSlug interface{}) *MockDatabase_SetLastSuccessfulSyncForTeam_Call {
	return &MockDatabase_SetLastSuccessfulSyncForTeam_Call{Call: _e.mock.On("SetLastSuccessfulSyncForTeam", ctx, teamSlug)}
}

func (_c *MockDatabase_SetLastSuccessfulSyncForTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug)) *MockDatabase_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_SetLastSuccessfulSyncForTeam_Call) Return(_a0 error) *MockDatabase_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_SetLastSuccessfulSyncForTeam_Call) RunAndReturn(run func(context.Context, slug.Slug) error) *MockDatabase_SetLastSuccessfulSyncForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SetReconcilerErrorForTeam provides a mock function with given fields: ctx, correlationID, _a2, reconcilerName, err
func (_m *MockDatabase) SetReconcilerErrorForTeam(ctx context.Context, correlationID uuid.UUID, _a2 slug.Slug, reconcilerName sqlc.ReconcilerName, err error) error {
	ret := _m.Called(ctx, correlationID, _a2, reconcilerName, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug, sqlc.ReconcilerName, error) error); ok {
		r0 = rf(ctx, correlationID, _a2, reconcilerName, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_SetReconcilerErrorForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReconcilerErrorForTeam'
type MockDatabase_SetReconcilerErrorForTeam_Call struct {
	*mock.Call
}

// SetReconcilerErrorForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - correlationID uuid.UUID
//   - _a2 slug.Slug
//   - reconcilerName sqlc.ReconcilerName
//   - err error
func (_e *MockDatabase_Expecter) SetReconcilerErrorForTeam(ctx interface{}, correlationID interface{}, _a2 interface{}, reconcilerName interface{}, err interface{}) *MockDatabase_SetReconcilerErrorForTeam_Call {
	return &MockDatabase_SetReconcilerErrorForTeam_Call{Call: _e.mock.On("SetReconcilerErrorForTeam", ctx, correlationID, _a2, reconcilerName, err)}
}

func (_c *MockDatabase_SetReconcilerErrorForTeam_Call) Run(run func(ctx context.Context, correlationID uuid.UUID, _a2 slug.Slug, reconcilerName sqlc.ReconcilerName, err error)) *MockDatabase_SetReconcilerErrorForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(slug.Slug), args[3].(sqlc.ReconcilerName), args[4].(error))
	})
	return _c
}

func (_c *MockDatabase_SetReconcilerErrorForTeam_Call) Return(_a0 error) *MockDatabase_SetReconcilerErrorForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_SetReconcilerErrorForTeam_Call) RunAndReturn(run func(context.Context, uuid.UUID, slug.Slug, sqlc.ReconcilerName, error) error) *MockDatabase_SetReconcilerErrorForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SetReconcilerStateForTeam provides a mock function with given fields: ctx, reconcilerName, _a2, state
func (_m *MockDatabase) SetReconcilerStateForTeam(ctx context.Context, reconcilerName sqlc.ReconcilerName, _a2 slug.Slug, state interface{}) error {
	ret := _m.Called(ctx, reconcilerName, _a2, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.ReconcilerName, slug.Slug, interface{}) error); ok {
		r0 = rf(ctx, reconcilerName, _a2, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_SetReconcilerStateForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReconcilerStateForTeam'
type MockDatabase_SetReconcilerStateForTeam_Call struct {
	*mock.Call
}

// SetReconcilerStateForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - reconcilerName sqlc.ReconcilerName
//   - _a2 slug.Slug
//   - state interface{}
func (_e *MockDatabase_Expecter) SetReconcilerStateForTeam(ctx interface{}, reconcilerName interface{}, _a2 interface{}, state interface{}) *MockDatabase_SetReconcilerStateForTeam_Call {
	return &MockDatabase_SetReconcilerStateForTeam_Call{Call: _e.mock.On("SetReconcilerStateForTeam", ctx, reconcilerName, _a2, state)}
}

func (_c *MockDatabase_SetReconcilerStateForTeam_Call) Run(run func(ctx context.Context, reconcilerName sqlc.ReconcilerName, _a2 slug.Slug, state interface{})) *MockDatabase_SetReconcilerStateForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.ReconcilerName), args[2].(slug.Slug), args[3].(interface{}))
	})
	return _c
}

func (_c *MockDatabase_SetReconcilerStateForTeam_Call) Return(_a0 error) *MockDatabase_SetReconcilerStateForTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_SetReconcilerStateForTeam_Call) RunAndReturn(run func(context.Context, sqlc.ReconcilerName, slug.Slug, interface{}) error) *MockDatabase_SetReconcilerStateForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// SetSlackAlertsChannel provides a mock function with given fields: ctx, teamSlug, environment, channelName
func (_m *MockDatabase) SetSlackAlertsChannel(ctx context.Context, teamSlug slug.Slug, environment string, channelName string) error {
	ret := _m.Called(ctx, teamSlug, environment, channelName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, string, string) error); ok {
		r0 = rf(ctx, teamSlug, environment, channelName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_SetSlackAlertsChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSlackAlertsChannel'
type MockDatabase_SetSlackAlertsChannel_Call struct {
	*mock.Call
}

// SetSlackAlertsChannel is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - environment string
//   - channelName string
func (_e *MockDatabase_Expecter) SetSlackAlertsChannel(ctx interface{}, teamSlug interface{}, environment interface{}, channelName interface{}) *MockDatabase_SetSlackAlertsChannel_Call {
	return &MockDatabase_SetSlackAlertsChannel_Call{Call: _e.mock.On("SetSlackAlertsChannel", ctx, teamSlug, environment, channelName)}
}

func (_c *MockDatabase_SetSlackAlertsChannel_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, environment string, channelName string)) *MockDatabase_SetSlackAlertsChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatabase_SetSlackAlertsChannel_Call) Return(_a0 error) *MockDatabase_SetSlackAlertsChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_SetSlackAlertsChannel_Call) RunAndReturn(run func(context.Context, slug.Slug, string, string) error) *MockDatabase_SetSlackAlertsChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SetTeamMemberRole provides a mock function with given fields: ctx, userID, teamSlug, role
func (_m *MockDatabase) SetTeamMemberRole(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug, role sqlc.RoleName) error {
	ret := _m.Called(ctx, userID, teamSlug, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug, sqlc.RoleName) error); ok {
		r0 = rf(ctx, userID, teamSlug, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_SetTeamMemberRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTeamMemberRole'
type MockDatabase_SetTeamMemberRole_Call struct {
	*mock.Call
}

// SetTeamMemberRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - teamSlug slug.Slug
//   - role sqlc.RoleName
func (_e *MockDatabase_Expecter) SetTeamMemberRole(ctx interface{}, userID interface{}, teamSlug interface{}, role interface{}) *MockDatabase_SetTeamMemberRole_Call {
	return &MockDatabase_SetTeamMemberRole_Call{Call: _e.mock.On("SetTeamMemberRole", ctx, userID, teamSlug, role)}
}

func (_c *MockDatabase_SetTeamMemberRole_Call) Run(run func(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug, role sqlc.RoleName)) *MockDatabase_SetTeamMemberRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(slug.Slug), args[3].(sqlc.RoleName))
	})
	return _c
}

func (_c *MockDatabase_SetTeamMemberRole_Call) Return(_a0 error) *MockDatabase_SetTeamMemberRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_SetTeamMemberRole_Call) RunAndReturn(run func(context.Context, uuid.UUID, slug.Slug, sqlc.RoleName) error) *MockDatabase_SetTeamMemberRole_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: ctx, fn
func (_m *MockDatabase) Transaction(ctx context.Context, fn DatabaseTransactionFunc) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DatabaseTransactionFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockDatabase_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn DatabaseTransactionFunc
func (_e *MockDatabase_Expecter) Transaction(ctx interface{}, fn interface{}) *MockDatabase_Transaction_Call {
	return &MockDatabase_Transaction_Call{Call: _e.mock.On("Transaction", ctx, fn)}
}

func (_c *MockDatabase_Transaction_Call) Run(run func(ctx context.Context, fn DatabaseTransactionFunc)) *MockDatabase_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DatabaseTransactionFunc))
	})
	return _c
}

func (_c *MockDatabase_Transaction_Call) Return(_a0 error) *MockDatabase_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Transaction_Call) RunAndReturn(run func(context.Context, DatabaseTransactionFunc) error) *MockDatabase_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeam provides a mock function with given fields: ctx, teamSlug, purpose, slackChannel
func (_m *MockDatabase) UpdateTeam(ctx context.Context, teamSlug slug.Slug, purpose *string, slackChannel *string) (*Team, error) {
	ret := _m.Called(ctx, teamSlug, purpose, slackChannel)

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, *string, *string) (*Team, error)); ok {
		return rf(ctx, teamSlug, purpose, slackChannel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, slug.Slug, *string, *string) *Team); ok {
		r0 = rf(ctx, teamSlug, purpose, slackChannel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, slug.Slug, *string, *string) error); ok {
		r1 = rf(ctx, teamSlug, purpose, slackChannel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_UpdateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeam'
type MockDatabase_UpdateTeam_Call struct {
	*mock.Call
}

// UpdateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug slug.Slug
//   - purpose *string
//   - slackChannel *string
func (_e *MockDatabase_Expecter) UpdateTeam(ctx interface{}, teamSlug interface{}, purpose interface{}, slackChannel interface{}) *MockDatabase_UpdateTeam_Call {
	return &MockDatabase_UpdateTeam_Call{Call: _e.mock.On("UpdateTeam", ctx, teamSlug, purpose, slackChannel)}
}

func (_c *MockDatabase_UpdateTeam_Call) Run(run func(ctx context.Context, teamSlug slug.Slug, purpose *string, slackChannel *string)) *MockDatabase_UpdateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slug.Slug), args[2].(*string), args[3].(*string))
	})
	return _c
}

func (_c *MockDatabase_UpdateTeam_Call) Return(_a0 *Team, _a1 error) *MockDatabase_UpdateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_UpdateTeam_Call) RunAndReturn(run func(context.Context, slug.Slug, *string, *string) (*Team, error)) *MockDatabase_UpdateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, userID, name, email, externalID
func (_m *MockDatabase) UpdateUser(ctx context.Context, userID uuid.UUID, name string, email string, externalID string) (*User, error) {
	ret := _m.Called(ctx, userID, name, email, externalID)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string) (*User, error)); ok {
		return rf(ctx, userID, name, email, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, string) *User); ok {
		r0 = rf(ctx, userID, name, email, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string, string) error); ok {
		r1 = rf(ctx, userID, name, email, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockDatabase_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - name string
//   - email string
//   - externalID string
func (_e *MockDatabase_Expecter) UpdateUser(ctx interface{}, userID interface{}, name interface{}, email interface{}, externalID interface{}) *MockDatabase_UpdateUser_Call {
	return &MockDatabase_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, userID, name, email, externalID)}
}

func (_c *MockDatabase_UpdateUser_Call) Run(run func(ctx context.Context, userID uuid.UUID, name string, email string, externalID string)) *MockDatabase_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockDatabase_UpdateUser_Call) Return(_a0 *User, _a1 error) *MockDatabase_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_UpdateUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, string) (*User, error)) *MockDatabase_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UserIsTeamOwner provides a mock function with given fields: ctx, userID, teamSlug
func (_m *MockDatabase) UserIsTeamOwner(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug) (bool, error) {
	ret := _m.Called(ctx, userID, teamSlug)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug) (bool, error)); ok {
		return rf(ctx, userID, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, slug.Slug) bool); ok {
		r0 = rf(ctx, userID, teamSlug)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, slug.Slug) error); ok {
		r1 = rf(ctx, userID, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatabase_UserIsTeamOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserIsTeamOwner'
type MockDatabase_UserIsTeamOwner_Call struct {
	*mock.Call
}

// UserIsTeamOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - teamSlug slug.Slug
func (_e *MockDatabase_Expecter) UserIsTeamOwner(ctx interface{}, userID interface{}, teamSlug interface{}) *MockDatabase_UserIsTeamOwner_Call {
	return &MockDatabase_UserIsTeamOwner_Call{Call: _e.mock.On("UserIsTeamOwner", ctx, userID, teamSlug)}
}

func (_c *MockDatabase_UserIsTeamOwner_Call) Run(run func(ctx context.Context, userID uuid.UUID, teamSlug slug.Slug)) *MockDatabase_UserIsTeamOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(slug.Slug))
	})
	return _c
}

func (_c *MockDatabase_UserIsTeamOwner_Call) Return(_a0 bool, _a1 error) *MockDatabase_UserIsTeamOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatabase_UserIsTeamOwner_Call) RunAndReturn(run func(context.Context, uuid.UUID, slug.Slug) (bool, error)) *MockDatabase_UserIsTeamOwner_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
