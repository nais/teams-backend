// Code generated by mockery. DO NOT EDIT.

package db

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthenticatedUser is an autogenerated mock type for the AuthenticatedUser type
type MockAuthenticatedUser struct {
	mock.Mock
}

type MockAuthenticatedUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticatedUser) EXPECT() *MockAuthenticatedUser_Expecter {
	return &MockAuthenticatedUser_Expecter{mock: &_m.Mock}
}

// GetID provides a mock function with given fields:
func (_m *MockAuthenticatedUser) GetID() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockAuthenticatedUser_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockAuthenticatedUser_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockAuthenticatedUser_Expecter) GetID() *MockAuthenticatedUser_GetID_Call {
	return &MockAuthenticatedUser_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockAuthenticatedUser_GetID_Call) Run(run func()) *MockAuthenticatedUser_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthenticatedUser_GetID_Call) Return(_a0 uuid.UUID) *MockAuthenticatedUser_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthenticatedUser_GetID_Call) RunAndReturn(run func() uuid.UUID) *MockAuthenticatedUser_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// Identity provides a mock function with given fields:
func (_m *MockAuthenticatedUser) Identity() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAuthenticatedUser_Identity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identity'
type MockAuthenticatedUser_Identity_Call struct {
	*mock.Call
}

// Identity is a helper method to define mock.On call
func (_e *MockAuthenticatedUser_Expecter) Identity() *MockAuthenticatedUser_Identity_Call {
	return &MockAuthenticatedUser_Identity_Call{Call: _e.mock.On("Identity")}
}

func (_c *MockAuthenticatedUser_Identity_Call) Run(run func()) *MockAuthenticatedUser_Identity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthenticatedUser_Identity_Call) Return(_a0 string) *MockAuthenticatedUser_Identity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthenticatedUser_Identity_Call) RunAndReturn(run func() string) *MockAuthenticatedUser_Identity_Call {
	_c.Call.Return(run)
	return _c
}

// IsServiceAccount provides a mock function with given fields:
func (_m *MockAuthenticatedUser) IsServiceAccount() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAuthenticatedUser_IsServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsServiceAccount'
type MockAuthenticatedUser_IsServiceAccount_Call struct {
	*mock.Call
}

// IsServiceAccount is a helper method to define mock.On call
func (_e *MockAuthenticatedUser_Expecter) IsServiceAccount() *MockAuthenticatedUser_IsServiceAccount_Call {
	return &MockAuthenticatedUser_IsServiceAccount_Call{Call: _e.mock.On("IsServiceAccount")}
}

func (_c *MockAuthenticatedUser_IsServiceAccount_Call) Run(run func()) *MockAuthenticatedUser_IsServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthenticatedUser_IsServiceAccount_Call) Return(_a0 bool) *MockAuthenticatedUser_IsServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthenticatedUser_IsServiceAccount_Call) RunAndReturn(run func() bool) *MockAuthenticatedUser_IsServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthenticatedUser creates a new instance of MockAuthenticatedUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticatedUser(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockAuthenticatedUser {
	mock := &MockAuthenticatedUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
