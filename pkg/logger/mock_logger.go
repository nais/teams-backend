// Code generated by mockery v2.14.0. DO NOT EDIT.

package logger

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"
)

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: args
func (_m *MockLogger) Debug(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Debugf provides a mock function with given fields: format, args
func (_m *MockLogger) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Debugln provides a mock function with given fields: args
func (_m *MockLogger) Debugln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: args
func (_m *MockLogger) Error(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockLogger) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Errorln provides a mock function with given fields: args
func (_m *MockLogger) Errorln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: args
func (_m *MockLogger) Fatal(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: format, args
func (_m *MockLogger) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Fatalln provides a mock function with given fields: args
func (_m *MockLogger) Fatalln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// GetInternalLogger provides a mock function with given fields:
func (_m *MockLogger) GetInternalLogger() *logrus.Logger {
	ret := _m.Called()

	var r0 *logrus.Logger
	if rf, ok := ret.Get(0).(func() *logrus.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Logger)
		}
	}

	return r0
}

// Info provides a mock function with given fields: args
func (_m *MockLogger) Info(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: format, args
func (_m *MockLogger) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Infoln provides a mock function with given fields: args
func (_m *MockLogger) Infoln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Panic provides a mock function with given fields: args
func (_m *MockLogger) Panic(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Panicf provides a mock function with given fields: format, args
func (_m *MockLogger) Panicf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Panicln provides a mock function with given fields: args
func (_m *MockLogger) Panicln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Print provides a mock function with given fields: args
func (_m *MockLogger) Print(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Printf provides a mock function with given fields: format, args
func (_m *MockLogger) Printf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Println provides a mock function with given fields: args
func (_m *MockLogger) Println(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: args
func (_m *MockLogger) Warn(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warnf provides a mock function with given fields: format, args
func (_m *MockLogger) Warnf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warning provides a mock function with given fields: args
func (_m *MockLogger) Warning(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warningf provides a mock function with given fields: format, args
func (_m *MockLogger) Warningf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warningln provides a mock function with given fields: args
func (_m *MockLogger) Warningln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Warnln provides a mock function with given fields: args
func (_m *MockLogger) Warnln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// WithActor provides a mock function with given fields: actor
func (_m *MockLogger) WithActor(actor string) Logger {
	ret := _m.Called(actor)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(actor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// WithCorrelationID provides a mock function with given fields: correlationID
func (_m *MockLogger) WithCorrelationID(correlationID string) Logger {
	ret := _m.Called(correlationID)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(correlationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// WithError provides a mock function with given fields: err
func (_m *MockLogger) WithError(err error) *logrus.Entry {
	ret := _m.Called(err)

	var r0 *logrus.Entry
	if rf, ok := ret.Get(0).(func(error) *logrus.Entry); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Entry)
		}
	}

	return r0
}

// WithField provides a mock function with given fields: key, value
func (_m *MockLogger) WithField(key string, value interface{}) *logrus.Entry {
	ret := _m.Called(key, value)

	var r0 *logrus.Entry
	if rf, ok := ret.Get(0).(func(string, interface{}) *logrus.Entry); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Entry)
		}
	}

	return r0
}

// WithFields provides a mock function with given fields: fields
func (_m *MockLogger) WithFields(fields logrus.Fields) *logrus.Entry {
	ret := _m.Called(fields)

	var r0 *logrus.Entry
	if rf, ok := ret.Get(0).(func(logrus.Fields) *logrus.Entry); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Entry)
		}
	}

	return r0
}

// WithReconciler provides a mock function with given fields: reconciler
func (_m *MockLogger) WithReconciler(reconciler string) Logger {
	ret := _m.Called(reconciler)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(reconciler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// WithSystem provides a mock function with given fields: system
func (_m *MockLogger) WithSystem(system string) Logger {
	ret := _m.Called(system)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(system)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// WithTeamSlug provides a mock function with given fields: slug
func (_m *MockLogger) WithTeamSlug(slug string) Logger {
	ret := _m.Called(slug)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// WithUser provides a mock function with given fields: user
func (_m *MockLogger) WithUser(user string) Logger {
	ret := _m.Called(user)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLogger(t mockConstructorTestingTNewMockLogger) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
