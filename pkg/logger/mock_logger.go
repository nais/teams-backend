// Code generated by mockery. DO NOT EDIT.

package logger

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"

	types "github.com/nais/teams-backend/pkg/types"

	uuid "github.com/google/uuid"
)

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: args
func (_m *MockLogger) Debug(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Debug(args ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(args ...interface{})) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(...interface{})) *MockLogger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Debugf provides a mock function with given fields: format, args
func (_m *MockLogger) Debugf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type MockLogger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Debugf(format interface{}, args ...interface{}) *MockLogger_Debugf_Call {
	return &MockLogger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Debugf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Debugf_Call) Return() *MockLogger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debugf_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Debugf_Call {
	_c.Call.Return(run)
	return _c
}

// Debugln provides a mock function with given fields: args
func (_m *MockLogger) Debugln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Debugln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugln'
type MockLogger_Debugln_Call struct {
	*mock.Call
}

// Debugln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Debugln(args ...interface{}) *MockLogger_Debugln_Call {
	return &MockLogger_Debugln_Call{Call: _e.mock.On("Debugln",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Debugln_Call) Run(run func(args ...interface{})) *MockLogger_Debugln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Debugln_Call) Return() *MockLogger_Debugln_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debugln_Call) RunAndReturn(run func(...interface{})) *MockLogger_Debugln_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: args
func (_m *MockLogger) Error(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Error(args ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(args ...interface{})) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(...interface{})) *MockLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Errorf provides a mock function with given fields: format, args
func (_m *MockLogger) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Errorf(format interface{}, args ...interface{}) *MockLogger_Errorf_Call {
	return &MockLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Errorf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Errorf_Call) Return() *MockLogger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Errorf_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Errorf_Call {
	_c.Call.Return(run)
	return _c
}

// Errorln provides a mock function with given fields: args
func (_m *MockLogger) Errorln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Errorln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorln'
type MockLogger_Errorln_Call struct {
	*mock.Call
}

// Errorln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Errorln(args ...interface{}) *MockLogger_Errorln_Call {
	return &MockLogger_Errorln_Call{Call: _e.mock.On("Errorln",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Errorln_Call) Run(run func(args ...interface{})) *MockLogger_Errorln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Errorln_Call) Return() *MockLogger_Errorln_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Errorln_Call) RunAndReturn(run func(...interface{})) *MockLogger_Errorln_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: args
func (_m *MockLogger) Fatal(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Fatal(args ...interface{}) *MockLogger_Fatal_Call {
	return &MockLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Fatal_Call) Run(run func(args ...interface{})) *MockLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Fatal_Call) Return() *MockLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Fatal_Call) RunAndReturn(run func(...interface{})) *MockLogger_Fatal_Call {
	_c.Call.Return(run)
	return _c
}

// Fatalf provides a mock function with given fields: format, args
func (_m *MockLogger) Fatalf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type MockLogger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Fatalf(format interface{}, args ...interface{}) *MockLogger_Fatalf_Call {
	return &MockLogger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Fatalf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Fatalf_Call) Return() *MockLogger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Fatalf_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Fatalf_Call {
	_c.Call.Return(run)
	return _c
}

// Fatalln provides a mock function with given fields: args
func (_m *MockLogger) Fatalln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Fatalln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalln'
type MockLogger_Fatalln_Call struct {
	*mock.Call
}

// Fatalln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Fatalln(args ...interface{}) *MockLogger_Fatalln_Call {
	return &MockLogger_Fatalln_Call{Call: _e.mock.On("Fatalln",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Fatalln_Call) Run(run func(args ...interface{})) *MockLogger_Fatalln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Fatalln_Call) Return() *MockLogger_Fatalln_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Fatalln_Call) RunAndReturn(run func(...interface{})) *MockLogger_Fatalln_Call {
	_c.Call.Return(run)
	return _c
}

// GetInternalLogger provides a mock function with given fields:
func (_m *MockLogger) GetInternalLogger() *logrus.Logger {
	ret := _m.Called()

	var r0 *logrus.Logger
	if rf, ok := ret.Get(0).(func() *logrus.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Logger)
		}
	}

	return r0
}

// MockLogger_GetInternalLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInternalLogger'
type MockLogger_GetInternalLogger_Call struct {
	*mock.Call
}

// GetInternalLogger is a helper method to define mock.On call
func (_e *MockLogger_Expecter) GetInternalLogger() *MockLogger_GetInternalLogger_Call {
	return &MockLogger_GetInternalLogger_Call{Call: _e.mock.On("GetInternalLogger")}
}

func (_c *MockLogger_GetInternalLogger_Call) Run(run func()) *MockLogger_GetInternalLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_GetInternalLogger_Call) Return(_a0 *logrus.Logger) *MockLogger_GetInternalLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_GetInternalLogger_Call) RunAndReturn(run func() *logrus.Logger) *MockLogger_GetInternalLogger_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: args
func (_m *MockLogger) Info(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Info(args ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(args ...interface{})) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(...interface{})) *MockLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Infof provides a mock function with given fields: format, args
func (_m *MockLogger) Infof(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Infof(format interface{}, args ...interface{}) *MockLogger_Infof_Call {
	return &MockLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Infof_Call) Run(run func(format string, args ...interface{})) *MockLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Infof_Call) Return() *MockLogger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Infof_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Infof_Call {
	_c.Call.Return(run)
	return _c
}

// Infoln provides a mock function with given fields: args
func (_m *MockLogger) Infoln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Infoln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infoln'
type MockLogger_Infoln_Call struct {
	*mock.Call
}

// Infoln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Infoln(args ...interface{}) *MockLogger_Infoln_Call {
	return &MockLogger_Infoln_Call{Call: _e.mock.On("Infoln",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Infoln_Call) Run(run func(args ...interface{})) *MockLogger_Infoln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Infoln_Call) Return() *MockLogger_Infoln_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Infoln_Call) RunAndReturn(run func(...interface{})) *MockLogger_Infoln_Call {
	_c.Call.Return(run)
	return _c
}

// Panic provides a mock function with given fields: args
func (_m *MockLogger) Panic(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type MockLogger_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Panic(args ...interface{}) *MockLogger_Panic_Call {
	return &MockLogger_Panic_Call{Call: _e.mock.On("Panic",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Panic_Call) Run(run func(args ...interface{})) *MockLogger_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Panic_Call) Return() *MockLogger_Panic_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Panic_Call) RunAndReturn(run func(...interface{})) *MockLogger_Panic_Call {
	_c.Call.Return(run)
	return _c
}

// Panicf provides a mock function with given fields: format, args
func (_m *MockLogger) Panicf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Panicf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicf'
type MockLogger_Panicf_Call struct {
	*mock.Call
}

// Panicf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Panicf(format interface{}, args ...interface{}) *MockLogger_Panicf_Call {
	return &MockLogger_Panicf_Call{Call: _e.mock.On("Panicf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Panicf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Panicf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Panicf_Call) Return() *MockLogger_Panicf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Panicf_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Panicf_Call {
	_c.Call.Return(run)
	return _c
}

// Panicln provides a mock function with given fields: args
func (_m *MockLogger) Panicln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Panicln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panicln'
type MockLogger_Panicln_Call struct {
	*mock.Call
}

// Panicln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Panicln(args ...interface{}) *MockLogger_Panicln_Call {
	return &MockLogger_Panicln_Call{Call: _e.mock.On("Panicln",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Panicln_Call) Run(run func(args ...interface{})) *MockLogger_Panicln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Panicln_Call) Return() *MockLogger_Panicln_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Panicln_Call) RunAndReturn(run func(...interface{})) *MockLogger_Panicln_Call {
	_c.Call.Return(run)
	return _c
}

// Print provides a mock function with given fields: args
func (_m *MockLogger) Print(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type MockLogger_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Print(args ...interface{}) *MockLogger_Print_Call {
	return &MockLogger_Print_Call{Call: _e.mock.On("Print",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Print_Call) Run(run func(args ...interface{})) *MockLogger_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Print_Call) Return() *MockLogger_Print_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Print_Call) RunAndReturn(run func(...interface{})) *MockLogger_Print_Call {
	_c.Call.Return(run)
	return _c
}

// Printf provides a mock function with given fields: format, args
func (_m *MockLogger) Printf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type MockLogger_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Printf(format interface{}, args ...interface{}) *MockLogger_Printf_Call {
	return &MockLogger_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Printf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Printf_Call) Return() *MockLogger_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Printf_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Printf_Call {
	_c.Call.Return(run)
	return _c
}

// Println provides a mock function with given fields: args
func (_m *MockLogger) Println(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Println_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Println'
type MockLogger_Println_Call struct {
	*mock.Call
}

// Println is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Println(args ...interface{}) *MockLogger_Println_Call {
	return &MockLogger_Println_Call{Call: _e.mock.On("Println",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Println_Call) Run(run func(args ...interface{})) *MockLogger_Println_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Println_Call) Return() *MockLogger_Println_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Println_Call) RunAndReturn(run func(...interface{})) *MockLogger_Println_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: args
func (_m *MockLogger) Warn(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Warn(args ...interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Warn_Call) Run(run func(args ...interface{})) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(...interface{})) *MockLogger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// Warnf provides a mock function with given fields: format, args
func (_m *MockLogger) Warnf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type MockLogger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Warnf(format interface{}, args ...interface{}) *MockLogger_Warnf_Call {
	return &MockLogger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Warnf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warnf_Call) Return() *MockLogger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warnf_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Warnf_Call {
	_c.Call.Return(run)
	return _c
}

// Warning provides a mock function with given fields: args
func (_m *MockLogger) Warning(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Warning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warning'
type MockLogger_Warning_Call struct {
	*mock.Call
}

// Warning is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Warning(args ...interface{}) *MockLogger_Warning_Call {
	return &MockLogger_Warning_Call{Call: _e.mock.On("Warning",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Warning_Call) Run(run func(args ...interface{})) *MockLogger_Warning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warning_Call) Return() *MockLogger_Warning_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warning_Call) RunAndReturn(run func(...interface{})) *MockLogger_Warning_Call {
	_c.Call.Return(run)
	return _c
}

// Warningf provides a mock function with given fields: format, args
func (_m *MockLogger) Warningf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Warningf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warningf'
type MockLogger_Warningf_Call struct {
	*mock.Call
}

// Warningf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Warningf(format interface{}, args ...interface{}) *MockLogger_Warningf_Call {
	return &MockLogger_Warningf_Call{Call: _e.mock.On("Warningf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Warningf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Warningf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warningf_Call) Return() *MockLogger_Warningf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warningf_Call) RunAndReturn(run func(string, ...interface{})) *MockLogger_Warningf_Call {
	_c.Call.Return(run)
	return _c
}

// Warningln provides a mock function with given fields: args
func (_m *MockLogger) Warningln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Warningln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warningln'
type MockLogger_Warningln_Call struct {
	*mock.Call
}

// Warningln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Warningln(args ...interface{}) *MockLogger_Warningln_Call {
	return &MockLogger_Warningln_Call{Call: _e.mock.On("Warningln",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Warningln_Call) Run(run func(args ...interface{})) *MockLogger_Warningln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warningln_Call) Return() *MockLogger_Warningln_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warningln_Call) RunAndReturn(run func(...interface{})) *MockLogger_Warningln_Call {
	_c.Call.Return(run)
	return _c
}

// Warnln provides a mock function with given fields: args
func (_m *MockLogger) Warnln(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLogger_Warnln_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnln'
type MockLogger_Warnln_Call struct {
	*mock.Call
}

// Warnln is a helper method to define mock.On call
//   - args ...interface{}
func (_e *MockLogger_Expecter) Warnln(args ...interface{}) *MockLogger_Warnln_Call {
	return &MockLogger_Warnln_Call{Call: _e.mock.On("Warnln",
		append([]interface{}{}, args...)...)}
}

func (_c *MockLogger_Warnln_Call) Run(run func(args ...interface{})) *MockLogger_Warnln_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Warnln_Call) Return() *MockLogger_Warnln_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warnln_Call) RunAndReturn(run func(...interface{})) *MockLogger_Warnln_Call {
	_c.Call.Return(run)
	return _c
}

// WithActor provides a mock function with given fields: actor
func (_m *MockLogger) WithActor(actor string) Logger {
	ret := _m.Called(actor)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(actor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// MockLogger_WithActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithActor'
type MockLogger_WithActor_Call struct {
	*mock.Call
}

// WithActor is a helper method to define mock.On call
//   - actor string
func (_e *MockLogger_Expecter) WithActor(actor interface{}) *MockLogger_WithActor_Call {
	return &MockLogger_WithActor_Call{Call: _e.mock.On("WithActor", actor)}
}

func (_c *MockLogger_WithActor_Call) Run(run func(actor string)) *MockLogger_WithActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogger_WithActor_Call) Return(_a0 Logger) *MockLogger_WithActor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_WithActor_Call) RunAndReturn(run func(string) Logger) *MockLogger_WithActor_Call {
	_c.Call.Return(run)
	return _c
}

// WithComponent provides a mock function with given fields: componentName
func (_m *MockLogger) WithComponent(componentName types.ComponentName) Logger {
	ret := _m.Called(componentName)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(types.ComponentName) Logger); ok {
		r0 = rf(componentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// MockLogger_WithComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithComponent'
type MockLogger_WithComponent_Call struct {
	*mock.Call
}

// WithComponent is a helper method to define mock.On call
//   - componentName types.ComponentName
func (_e *MockLogger_Expecter) WithComponent(componentName interface{}) *MockLogger_WithComponent_Call {
	return &MockLogger_WithComponent_Call{Call: _e.mock.On("WithComponent", componentName)}
}

func (_c *MockLogger_WithComponent_Call) Run(run func(componentName types.ComponentName)) *MockLogger_WithComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.ComponentName))
	})
	return _c
}

func (_c *MockLogger_WithComponent_Call) Return(_a0 Logger) *MockLogger_WithComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_WithComponent_Call) RunAndReturn(run func(types.ComponentName) Logger) *MockLogger_WithComponent_Call {
	_c.Call.Return(run)
	return _c
}

// WithCorrelationID provides a mock function with given fields: correlationID
func (_m *MockLogger) WithCorrelationID(correlationID uuid.UUID) Logger {
	ret := _m.Called(correlationID)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(uuid.UUID) Logger); ok {
		r0 = rf(correlationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// MockLogger_WithCorrelationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithCorrelationID'
type MockLogger_WithCorrelationID_Call struct {
	*mock.Call
}

// WithCorrelationID is a helper method to define mock.On call
//   - correlationID uuid.UUID
func (_e *MockLogger_Expecter) WithCorrelationID(correlationID interface{}) *MockLogger_WithCorrelationID_Call {
	return &MockLogger_WithCorrelationID_Call{Call: _e.mock.On("WithCorrelationID", correlationID)}
}

func (_c *MockLogger_WithCorrelationID_Call) Run(run func(correlationID uuid.UUID)) *MockLogger_WithCorrelationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockLogger_WithCorrelationID_Call) Return(_a0 Logger) *MockLogger_WithCorrelationID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_WithCorrelationID_Call) RunAndReturn(run func(uuid.UUID) Logger) *MockLogger_WithCorrelationID_Call {
	_c.Call.Return(run)
	return _c
}

// WithError provides a mock function with given fields: err
func (_m *MockLogger) WithError(err error) *logrus.Entry {
	ret := _m.Called(err)

	var r0 *logrus.Entry
	if rf, ok := ret.Get(0).(func(error) *logrus.Entry); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Entry)
		}
	}

	return r0
}

// MockLogger_WithError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithError'
type MockLogger_WithError_Call struct {
	*mock.Call
}

// WithError is a helper method to define mock.On call
//   - err error
func (_e *MockLogger_Expecter) WithError(err interface{}) *MockLogger_WithError_Call {
	return &MockLogger_WithError_Call{Call: _e.mock.On("WithError", err)}
}

func (_c *MockLogger_WithError_Call) Run(run func(err error)) *MockLogger_WithError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockLogger_WithError_Call) Return(_a0 *logrus.Entry) *MockLogger_WithError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_WithError_Call) RunAndReturn(run func(error) *logrus.Entry) *MockLogger_WithError_Call {
	_c.Call.Return(run)
	return _c
}

// WithField provides a mock function with given fields: key, value
func (_m *MockLogger) WithField(key string, value interface{}) *logrus.Entry {
	ret := _m.Called(key, value)

	var r0 *logrus.Entry
	if rf, ok := ret.Get(0).(func(string, interface{}) *logrus.Entry); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Entry)
		}
	}

	return r0
}

// MockLogger_WithField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithField'
type MockLogger_WithField_Call struct {
	*mock.Call
}

// WithField is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockLogger_Expecter) WithField(key interface{}, value interface{}) *MockLogger_WithField_Call {
	return &MockLogger_WithField_Call{Call: _e.mock.On("WithField", key, value)}
}

func (_c *MockLogger_WithField_Call) Run(run func(key string, value interface{})) *MockLogger_WithField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockLogger_WithField_Call) Return(_a0 *logrus.Entry) *MockLogger_WithField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_WithField_Call) RunAndReturn(run func(string, interface{}) *logrus.Entry) *MockLogger_WithField_Call {
	_c.Call.Return(run)
	return _c
}

// WithFields provides a mock function with given fields: fields
func (_m *MockLogger) WithFields(fields logrus.Fields) *logrus.Entry {
	ret := _m.Called(fields)

	var r0 *logrus.Entry
	if rf, ok := ret.Get(0).(func(logrus.Fields) *logrus.Entry); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logrus.Entry)
		}
	}

	return r0
}

// MockLogger_WithFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithFields'
type MockLogger_WithFields_Call struct {
	*mock.Call
}

// WithFields is a helper method to define mock.On call
//   - fields logrus.Fields
func (_e *MockLogger_Expecter) WithFields(fields interface{}) *MockLogger_WithFields_Call {
	return &MockLogger_WithFields_Call{Call: _e.mock.On("WithFields", fields)}
}

func (_c *MockLogger_WithFields_Call) Run(run func(fields logrus.Fields)) *MockLogger_WithFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logrus.Fields))
	})
	return _c
}

func (_c *MockLogger_WithFields_Call) Return(_a0 *logrus.Entry) *MockLogger_WithFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_WithFields_Call) RunAndReturn(run func(logrus.Fields) *logrus.Entry) *MockLogger_WithFields_Call {
	_c.Call.Return(run)
	return _c
}

// WithReconciler provides a mock function with given fields: reconciler
func (_m *MockLogger) WithReconciler(reconciler string) Logger {
	ret := _m.Called(reconciler)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(reconciler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// MockLogger_WithReconciler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithReconciler'
type MockLogger_WithReconciler_Call struct {
	*mock.Call
}

// WithReconciler is a helper method to define mock.On call
//   - reconciler string
func (_e *MockLogger_Expecter) WithReconciler(reconciler interface{}) *MockLogger_WithReconciler_Call {
	return &MockLogger_WithReconciler_Call{Call: _e.mock.On("WithReconciler", reconciler)}
}

func (_c *MockLogger_WithReconciler_Call) Run(run func(reconciler string)) *MockLogger_WithReconciler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogger_WithReconciler_Call) Return(_a0 Logger) *MockLogger_WithReconciler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_WithReconciler_Call) RunAndReturn(run func(string) Logger) *MockLogger_WithReconciler_Call {
	_c.Call.Return(run)
	return _c
}

// WithTeamSlug provides a mock function with given fields: slug
func (_m *MockLogger) WithTeamSlug(slug string) Logger {
	ret := _m.Called(slug)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// MockLogger_WithTeamSlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTeamSlug'
type MockLogger_WithTeamSlug_Call struct {
	*mock.Call
}

// WithTeamSlug is a helper method to define mock.On call
//   - slug string
func (_e *MockLogger_Expecter) WithTeamSlug(slug interface{}) *MockLogger_WithTeamSlug_Call {
	return &MockLogger_WithTeamSlug_Call{Call: _e.mock.On("WithTeamSlug", slug)}
}

func (_c *MockLogger_WithTeamSlug_Call) Run(run func(slug string)) *MockLogger_WithTeamSlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogger_WithTeamSlug_Call) Return(_a0 Logger) *MockLogger_WithTeamSlug_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_WithTeamSlug_Call) RunAndReturn(run func(string) Logger) *MockLogger_WithTeamSlug_Call {
	_c.Call.Return(run)
	return _c
}

// WithUser provides a mock function with given fields: user
func (_m *MockLogger) WithUser(user string) Logger {
	ret := _m.Called(user)

	var r0 Logger
	if rf, ok := ret.Get(0).(func(string) Logger); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Logger)
		}
	}

	return r0
}

// MockLogger_WithUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithUser'
type MockLogger_WithUser_Call struct {
	*mock.Call
}

// WithUser is a helper method to define mock.On call
//   - user string
func (_e *MockLogger_Expecter) WithUser(user interface{}) *MockLogger_WithUser_Call {
	return &MockLogger_WithUser_Call{Call: _e.mock.On("WithUser", user)}
}

func (_c *MockLogger_WithUser_Call) Run(run func(user string)) *MockLogger_WithUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLogger_WithUser_Call) Return(_a0 Logger) *MockLogger_WithUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogger_WithUser_Call) RunAndReturn(run func(string) Logger) *MockLogger_WithUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
