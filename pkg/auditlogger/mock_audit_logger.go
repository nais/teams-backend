// Code generated by mockery v2.14.0. DO NOT EDIT.

package auditlogger

import (
	context "context"

	sqlc "github.com/nais/console/pkg/sqlc"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAuditLogger is an autogenerated mock type for the AuditLogger type
type MockAuditLogger struct {
	mock.Mock
}

// Logf provides a mock function with given fields: ctx, action, correlationId, systemName, actorEmail, targetTeamSlug, targetUserEmail, message, messageArgs
func (_m *MockAuditLogger) Logf(ctx context.Context, action sqlc.AuditAction, correlationId uuid.UUID, systemName *sqlc.SystemName, actorEmail *string, targetTeamSlug *string, targetUserEmail *string, message string, messageArgs ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, action, correlationId, systemName, actorEmail, targetTeamSlug, targetUserEmail, message)
	_ca = append(_ca, messageArgs...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.AuditAction, uuid.UUID, *sqlc.SystemName, *string, *string, *string, string, ...interface{}) error); ok {
		r0 = rf(ctx, action, correlationId, systemName, actorEmail, targetTeamSlug, targetUserEmail, message, messageArgs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockAuditLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuditLogger creates a new instance of MockAuditLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuditLogger(t mockConstructorTestingTNewMockAuditLogger) *MockAuditLogger {
	mock := &MockAuditLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
