// Code generated by mockery. DO NOT EDIT.

package auditlogger

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuditLogger is an autogenerated mock type for the AuditLogger type
type MockAuditLogger struct {
	mock.Mock
}

type MockAuditLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditLogger) EXPECT() *MockAuditLogger_Expecter {
	return &MockAuditLogger_Expecter{mock: &_m.Mock}
}

// Logf provides a mock function with given fields: ctx, targets, fields, message, messageArgs
func (_m *MockAuditLogger) Logf(ctx context.Context, targets []Target, fields Fields, message string, messageArgs ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, targets, fields, message)
	_ca = append(_ca, messageArgs...)
	_m.Called(_ca...)
}

// MockAuditLogger_Logf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logf'
type MockAuditLogger_Logf_Call struct {
	*mock.Call
}

// Logf is a helper method to define mock.On call
//   - ctx context.Context
//   - targets []Target
//   - fields Fields
//   - message string
//   - messageArgs ...interface{}
func (_e *MockAuditLogger_Expecter) Logf(ctx interface{}, targets interface{}, fields interface{}, message interface{}, messageArgs ...interface{}) *MockAuditLogger_Logf_Call {
	return &MockAuditLogger_Logf_Call{Call: _e.mock.On("Logf",
		append([]interface{}{ctx, targets, fields, message}, messageArgs...)...)}
}

func (_c *MockAuditLogger_Logf_Call) Run(run func(ctx context.Context, targets []Target, fields Fields, message string, messageArgs ...interface{})) *MockAuditLogger_Logf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].([]Target), args[2].(Fields), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockAuditLogger_Logf_Call) Return() *MockAuditLogger_Logf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuditLogger_Logf_Call) RunAndReturn(run func(context.Context, []Target, Fields, string, ...interface{})) *MockAuditLogger_Logf_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuditLogger creates a new instance of MockAuditLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditLogger(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockAuditLogger {
	mock := &MockAuditLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
