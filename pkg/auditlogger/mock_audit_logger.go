// Code generated by mockery v2.14.0. DO NOT EDIT.

package auditlogger

import (
	context "context"

	db "github.com/nais/console/pkg/db"
	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/nais/console/pkg/sqlc"
)

// MockAuditLogger is an autogenerated mock type for the AuditLogger type
type MockAuditLogger struct {
	mock.Mock
}

// Logf provides a mock function with given fields: ctx, dbtx, targets, entry, message, messageArgs
func (_m *MockAuditLogger) Logf(ctx context.Context, dbtx db.Database, targets []Target, entry Fields, message string, messageArgs ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dbtx, targets, entry, message)
	_ca = append(_ca, messageArgs...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Database, []Target, Fields, string, ...interface{}) error); ok {
		r0 = rf(ctx, dbtx, targets, entry, message, messageArgs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithSystemName provides a mock function with given fields: systemName
func (_m *MockAuditLogger) WithSystemName(systemName sqlc.SystemName) AuditLogger {
	ret := _m.Called(systemName)

	var r0 AuditLogger
	if rf, ok := ret.Get(0).(func(sqlc.SystemName) AuditLogger); ok {
		r0 = rf(systemName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(AuditLogger)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockAuditLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuditLogger creates a new instance of MockAuditLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuditLogger(t mockConstructorTestingTNewMockAuditLogger) *MockAuditLogger {
	mock := &MockAuditLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
