// Code generated by mockery v2.14.0. DO NOT EDIT.

package auditlogger

import (
	dbmodels "github.com/nais/console/pkg/dbmodels"
	mock "github.com/stretchr/testify/mock"

	sqlc "github.com/nais/console/pkg/sqlc"
)

// MockAuditLogger is an autogenerated mock type for the AuditLogger type
type MockAuditLogger struct {
	mock.Mock
}

// Logf provides a mock function with given fields: action, corr, targetSystem, actor, targetTeam, targetUser, message, messageArgs
func (_m *MockAuditLogger) Logf(action string, corr sqlc.Correlation, targetSystem sqlc.System, actor *dbmodels.User, targetTeam *dbmodels.Team, targetUser *dbmodels.User, message string, messageArgs ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, action, corr, targetSystem, actor, targetTeam, targetUser, message)
	_ca = append(_ca, messageArgs...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, sqlc.Correlation, sqlc.System, *dbmodels.User, *dbmodels.Team, *dbmodels.User, string, ...interface{}) error); ok {
		r0 = rf(action, corr, targetSystem, actor, targetTeam, targetUser, message, messageArgs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockAuditLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuditLogger creates a new instance of MockAuditLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuditLogger(t mockConstructorTestingTNewMockAuditLogger) *MockAuditLogger {
	mock := &MockAuditLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
